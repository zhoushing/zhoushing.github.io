<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐年の博客</title>
  
  
  <link href="https://blog.xuyicheng.top/atom.xml" rel="self"/>
  
  <link href="https://blog.xuyicheng.top/"/>
  <updated>2023-01-08T08:13:31.937Z</updated>
  <id>https://blog.xuyicheng.top/</id>
  
  <author>
    <name>Marx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>访问控制模型浅析</title>
    <link href="https://blog.xuyicheng.top/2023-01-08-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9E%8B%E6%B5%85%E6%9E%90.html"/>
    <id>https://blog.xuyicheng.top/2023-01-08-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9E%8B%E6%B5%85%E6%9E%90.html</id>
    <published>2023-01-08T08:11:14.000Z</published>
    <updated>2023-01-08T08:13:31.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在一个系统之中，对于权限的把控以及用户的认证可以说是非常的重要。笔者在以前开发的系统中也接触到了各种的对用户访问的控制模型，偶然刷到大佬的文章，特记下此文来进行探讨。</p><h2 id="认证与授权"><a href="#认证与授权" class="headerlink" title="认证与授权"></a>认证与授权</h2><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>在一个系统中，尤其是企业系统中，对用户的认证很重要。在企业系统中，用户通常分为外部用户和内部用户。这两者的认证通常也不相同，</p><ul><li>外部用户可能更多使用的手机号、微信等方式来进行登录。登录进入之后，直接使用企业提供的应用即可，提供的也通常是统一权限。</li><li>内部用户使用诸如企业微信、企业邮箱、<a href="https://baike.baidu.com/item/%E5%9F%9F%E8%B4%A6%E5%8F%B7?fromModule=lemma_search-box">域账号</a>等方式来进行登录。因为企业内部通常有许多的内部系统，比如OA、hr等系统。所以每个员工可能拥有着不同系统的使用权，同时各个系统内部可能还拥有自己的权限，比如经典的管理员以及普通用户。</li></ul><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108161331407.png" alt="image-20230108161331407"></p><h3 id="授权-访问控制"><a href="#授权-访问控制" class="headerlink" title="授权/访问控制"></a>授权/访问控制</h3><p>授权，也叫做访问控制，就是授予用户访问某个实体（资源，数据）的权限。因此一个好的访问控制模型就至关重要了。</p><h3 id="访问控制模型"><a href="#访问控制模型" class="headerlink" title="访问控制模型"></a>访问控制模型</h3><h4 id="访问控制列表"><a href="#访问控制列表" class="headerlink" title="访问控制列表"></a>访问控制列表</h4><p>ACL (Access Control Lists)，访问控制列表。需要管理员为每个资源（客体）显式分配权限。</p><p>这是一种比较古老的权限控制机制，它是面向资源的访问控制模型。管理员为每个资源（客体）分配<a href="https://www.zhihu.com/search?q=%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2675380576%7D">权限列表</a>，这个列表里记录了用户/角色对于资源的操作权限，当需要访问这些资源时，会首先检查<a href="https://www.zhihu.com/search?q=%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2675380576%7D">访问控制列表</a>中是否存在当前用户/角色的访问权限，如果存在，允许相应的操作，否则就拒绝相应的操作。</p><p>优势：</p><ul><li>实施简单</li></ul><p>问题：</p><ul><li>一旦要修改安全策略或者需要审计，就意味着需要遍历大量的资源；</li><li>应用开发者必须保证所有的资源在创建出来开始就有合适的保护措施。</li></ul><h4 id="基于角色的访问控制"><a href="#基于角色的访问控制" class="headerlink" title="基于角色的访问控制"></a>基于角色的访问控制</h4><p>RBAC (Role-Based Access Control)，基于角色的访问控制。定义了一系列的角色与权限之间的关系。</p><p>基于角色的访问控制，应用特别广泛。它是防止权限泛滥，实现<a href="https://www.zhihu.com/search?q=%E6%9C%80%E5%B0%8F%E7%89%B9%E6%9D%83%E5%8E%9F%E5%88%99&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2675380576%7D">最小特权原则</a>的经典解决方案。RBAC 将用户按角色分类，通过用户的角色来确定用户对某项资源是否具备操作权限，它简化了用户与权限的管理，将用户与角色关联，角色与权限关联，然后权限与资源关联。</p><p>RBAC三要素：</p><ul><li>用户：系统使用者对应的用户</li><li>角色：一组权限的集合（如：管理员，普通用户等）</li><li>权限：菜单，按钮，数据的增删改查等详细权限</li></ul><p>在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。角色是为了分配多种权限而创建的，用户则依据它的责任和资格来被分配相应的角色。角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系同样也存在继承关系防止越权。</p><p>优势：</p><ul><li>比 ACL 更具<strong>扩展性</strong></li><li>在<strong>粗粒度的访问控制</strong>中工作得特别好 比如这样的场景：拥有经理角色的用户可以批准采购单。</li></ul><p>问题：</p><ul><li>随着组织的演进，往往出现角色爆炸的现象； 比如在一开始，一个销售的角色可以访问客户记录，这很合理。随着组织的扩张，开始组建按地域划分的销售团队，于是对客户记录的访问也需要按照地域来进行限制，这就导致系统中分别增加了美洲区的销售角色和亚太区的销售角色。</li><li>当管理员更新用户的权限时，需要大量的手工操作；</li><li><strong>做不到细粒度的访问控制</strong>； 比如这样的场景就做不到：经理只能批准其部门产生的采购单。 为了解决这种场景下的问题，应用开发者需要在应用里写额外的代码来做相应的检查，这导致了一个访问控制被分别定义在了两个不同的地方。从而导致了<ul><li>安全管理成本变高</li><li>合规和审计变得困难</li><li>安全策略缺少单一视图</li></ul></li><li><strong>资源与角色紧藕合</strong>，改一个角色会影响多个资源</li></ul><h4 id="基于分组的访问控制"><a href="#基于分组的访问控制" class="headerlink" title="基于分组的访问控制"></a>基于分组的访问控制</h4><p>GBAC (Group-Based Access Control)，基于分组的访问控制。可以维护具有层级关系的群组权限。</p><p>基于群组的访问控制机制。看上去和 RBAC 很像，但是 GBAC 可以用来对一个或多个具有层级关系的群组来定义访问资源的权限。它允许将某个群组的访问权限继承到其下级群组中，当然，也可以选择不去继承。</p><p>优势：</p><ul><li>适用于有组织结构的系统</li></ul><p>问题：</p><ul><li>同RBAC</li><li>如果组织结构维护在多个系统，容易造成组织结构维护困难</li></ul><h4 id="自主访问控制"><a href="#自主访问控制" class="headerlink" title="自主访问控制"></a>自主访问控制</h4><p>DAC (Discretionary Access Control)，<a href="https://www.zhihu.com/search?q=%E8%87%AA%E4%B8%BB%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2675380576%7D">自主访问控制</a>。让资源（客体）所有者来定义访问控制规则。</p><p>自主访问控制，让客体（资源）的所有者来定义访问控制规则。它是 Trusted Computer System Evaluation Criteria （TCSEC）定义的和一种访问控制机制，在 DAC 中，系统会根据被操作对象的<a href="https://www.zhihu.com/search?q=%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2675380576%7D">权限控制</a>列表中的信息，来决定当前用户能够对其进行哪些操作，用户可以将其具备权限直接或者间接授予其他用户（类似于网盘的分享，将文件的获取权限传递）。</p><p>优势：</p><ul><li>灵活</li><li>维护成本低</li><li>降低了管理员的工作难度</li></ul><p>问题：</p><ul><li>增强了整体访问控制监管的难度</li><li>安全性没有保证，完全取决于所有者的个人安全意识</li></ul><h4 id="强制访控制"><a href="#强制访控制" class="headerlink" title="强制访控制"></a>强制访控制</h4><p>MAC (Mandatory Access Control)，<a href="https://www.zhihu.com/search?q=%E5%BC%BA%E5%88%B6%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2675380576%7D">强制访问控制</a>。基于安全级别标签的访问控制策略，其安全性最高。</p><p>强制访问控制，通过定义安全级别标签来进行访问控制，也叫非自主访问控制，它可以限制主体对资源（客体）执行某种操作。它的安全策略由安全策略管理员集中控制，用户无权覆盖策略。比如为了保证机密性，MAC 不允许低级别的主体读取高级别的客体、不允许高级别的主体写入低级别的客体；为了保证完整性，MAC 不允许高级别的主体读取低级别的客体，不允许低级别的主体写入高级别的客体。一般普通公司不会采取 MAC，除非有相应的合规要求。</p><p>优势：</p><ul><li>相当的安全</li></ul><p>问题：</p><ul><li>对实施要求很高</li><li>需要对所有数据进行标记</li></ul><h4 id="基于声明的访问控制"><a href="#基于声明的访问控制" class="headerlink" title="基于声明的访问控制"></a>基于声明的访问控制</h4><p>Claims as Permissions，基于声明的访问控制。很多企业或组织都在某种形式上使用了这种机制。</p><p>基于声明式的权限管理，以声明的方式赋予用户指定的权限。这常常和 RBAC 结合使用，以弥补 RBAC 在细粒度的访问控制中的不足（给RBAC的权限管理打补丁）。</p><p>优势：</p><ul><li>自由度高</li></ul><p>问题：</p><ul><li>难以审计</li><li>难以验证正常的人拥有正确的权限</li><li>需要重新变动人员组织和责任时，需要手动流程</li><li>管理员倾向于添加越来越多的权限，但很少移除它们</li><li>决策数据定义在安全系统中，又被复制到其他的系统中，容易导致不一致发生</li><li>对于采用了 OAuth 或者 OpenID 单点登录的方案，在用户的令牌中携带全量用户权限，容易出现体积非常大的访问令牌</li><li>在用户身份声明中携带权限信息，导致认证和授权含混在一起</li></ul><h4 id="基于属性的访问控制策略"><a href="#基于属性的访问控制策略" class="headerlink" title="基于属性的访问控制策略"></a>基于属性的访问控制策略</h4><p>ABAC (Attribute-Based Access Control policy)，基于属性的访问控制策略。</p><p>它是基于属性的访问控制，有时也被称为 PBAC (Policy-Based Access Control)。它不给用户直接赋予访问权限，而是通过执行一系列的布尔规则来为资源授权（动态计算一个或者一组属性是否满足某一条件来进行授权）。ABAC 中一般来说包含用户属性、环境属性、操作属性以及资源属性。</p><ul><li>Subject （访问实体）<ul><li>人员，真实员工访问，匹配的可能是员工的工号、隶属的部门，职级等</li><li>非人类，例如自动运行的程序，甚至是智能机器人访问，匹配的可能是程序ID，机器人编号等</li></ul></li><li>Object（访问的目标资源）<ul><li>文件</li><li>机器或者设备</li><li>数据库</li><li>等等</li></ul></li><li>Operation（要进行的操作）<ul><li>Read</li><li>Write</li><li>Delete</li><li>So on</li></ul></li><li>Environment Conditions（环境条件）<ul><li>访问时间</li><li>访问位置（网络地址、物理地址等）</li><li>风险等级（类比于本地的是否安全）</li><li>等等</li></ul></li><li>Policy（实行的策略）</li></ul><p>优势：</p><ul><li>能够地从组织内部自然获取到的信息来做访问控制决策</li><li>没有额外的管理成本</li><li>可以在不需要部署应用的情况下更改这个决策</li><li>所有的利益相关者都能阅读</li><li>易于审计</li></ul><p>问题：</p><ul><li>比较复杂</li><li>实施难度较大</li></ul><h4 id="RBAC和ABAC比较"><a href="#RBAC和ABAC比较" class="headerlink" title="RBAC和ABAC比较"></a>RBAC和ABAC比较</h4><p>ACL和RBAC可以说是最常用的访问控制模型了，企业内部系统更多使用的是RBAC。在此比较一下传统的RBAC和较为新颖的ABAC模型。</p><p>ABAC的优势：</p><ul><li>对于大型组织，基于RBAC的控制模型需要维护大量的角色和授权关系，相比而言，ABAC更加灵活；</li><li>新增资源时，ABAC仅需要维护较少的资源，而RBAC需要维护所有相关的角色，ABAC可扩展性更强、更方便。</li><li>ABAC支持带有动态参数的授权规则，RBAC只能基于静态的参数进行判断。</li><li>ABAC权限控制的粒度比RBAC更细。</li></ul><p>RBAC的优势：</p><ul><li>对于中小型组织，维护角色和授权关系的工作量不大，反而定制各种策略相对麻烦，更容易接受RBAC授权模型。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本文参考：</p><ul><li><a href="https://www.zhihu.com/question/30472376/answer/2675380576?utm_campaign=&utm_medium=social&utm_oi=1058801297179852800&utm_psn=1572359038230269952&utm_source=qq">基于角色的访问控制? - 知乎</a></li><li><a href="https://help.aliyun.com/document_detail/174235.html">基于属性的访问控制(ABAC)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在一个系统之中，对于权限的把控以及用户的认证可以说是非常的重要。笔者在以前开发的系统中也接触到了各种的对用户访问的控制模型，偶然刷到大佬的文</summary>
      
    
    
    
    
    <category term="访问控制模型" scheme="https://blog.xuyicheng.top/tags/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Markdown入门</title>
    <link href="https://blog.xuyicheng.top/2023-01-08-Markdown%E5%85%A5%E9%97%A8.html"/>
    <id>https://blog.xuyicheng.top/2023-01-08-Markdown%E5%85%A5%E9%97%A8.html</id>
    <published>2023-01-08T07:43:57.000Z</published>
    <updated>2023-01-08T08:05:43.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown的起源"><a href="#Markdown的起源" class="headerlink" title="Markdown的起源"></a>Markdown的起源</h2><p>Markdown最早诞生于2004年，美国科技博主约翰·格鲁伯（John Gruber）希望「**用一种易读易写的纯文本格式写作，并可将其转换为有效的 XHTML (或HTML)**」，于是在 2004 年 3 月 19 日推出初代 Markdown，而在主要语法上其实有很大一部分是由格鲁伯和亚伦·斯沃茨（Aaron Swartz）共同合作制定。</p><h2 id="Markdown的特点"><a href="#Markdown的特点" class="headerlink" title="Markdown的特点"></a>Markdown的特点</h2><p>Markdown是一种轻量级的标记语言，完全由标点符号标签组成的纯文本。因此它并不复杂，通用的语法一共只有十多种，其目的是希望大家使用它撰写，并以纯文本形式原样发布，从而方便阅读、方便创作。其中，Markdown最重要的设计是可读性，也就是说这个语言可以直接在字面上的被阅读，而不用担心格式化指令标记的影响。</p><p>熟悉Markdown之后，写作效率能得到极大提升，而且它显然更适合阅读，不仅对于读者，对作者本人来说，也便于头脑清醒地进行持续的协作和修改。它的主要特点：</p><ol><li>只需关注内容本身，无需操心样式，思路几乎不受影响，给写作带来极大便利</li><li>实时可视化展现，逻辑性更强，对作者和读者都有很大帮助</li><li>显示效果统一，协作效率高，无数软件都支持，并且直接用纯文本text方式打开也能浏览和修改</li><li>可内联 HTML 语法。Markdown 是一种创作格式，语法集合比较小，只是HTML标签的一小部分。但Markdown也可以直接使用 HTML标签，例如用 HTML 标签替代 Markdown 的链接语法。</li></ol><h2 id="Markdown语法手册"><a href="#Markdown语法手册" class="headerlink" title="Markdown语法手册"></a>Markdown语法手册</h2><blockquote><p>下述大部分效果展示来自Typora</p></blockquote><h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><ol><li><code>*斜体*或_斜体_</code></li></ol><p>效果：<em>斜体</em> </p><ol><li><code>**粗体**</code></li></ol><p>效果：<strong>粗体</strong></p><ol><li><code>***加粗斜体***</code></li></ol><p>效果：**<em>加粗斜体**</em></p><ol><li><code>~~删除线~~</code></li></ol><p>效果：<del>删除线</del></p><h3 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h3><ol><li>一级标题如下：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">========（经笔者试验，最少只需要两个就可以生效）</span><br><span class="line">或者</span><br><span class="line"><span class="section"># 一级标题</span></span><br></pre></td></tr></table></figure><ol><li>二级标题如下：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">二级标题</span><br><span class="line">--------（同上）</span><br><span class="line">或者</span><br><span class="line"><span class="section">## 二级标题</span></span><br></pre></td></tr></table></figure><ol><li>三级到六级标题：（通常只支持到6级标题）</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><p>行内式的语法形式为：[]里写链接文字，()里写链接地址, ()中的<code>&quot;&quot;</code>中可以为链接指定title属性，title属性可加可不加（title属性的效果是鼠标悬停在链接上会出现指定的 title文字）。具体为<code>[链接文字](链接地址 &quot;链接标题&quot;)</code>这样的形式。注意链接地址与链接标题前有一个空格，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello [<span class="string">markdown</span>](<span class="link">https://baike.baidu.com/item/markdown/3245829?fr=aladdin &quot;markdown 百度百科&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h4><p>参考式超链接一般用在学术论文上面，或者当某一个链接在文章中多处使用，那么使用引用的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p>其语法形式为：参考式链接分为两部分，通常的写法为 <code>[链接文字][链接标记]</code>，在文本的任意位置添加<code>[链接标记]:链接地址 &quot;链接标题&quot;</code>，链接地址与链接标题前有一个空格。如果链接文字本身可以做为链接标记，你也可以写成<code>[链接文字][]</code> ，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">笔者常用的几个网站是[<span class="string">Google</span>][<span class="symbol">1</span>]、[<span class="string">Github</span>][<span class="symbol">2</span>]以及[<span class="string">掘金</span>][<span class="symbol">3</span>]，其中[<span class="string">Google</span>][<span class="symbol">1</span>]的子网站一个不错的[<span class="string">翻译网站</span>][<span class="symbol"></span>]。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]:<span class="link">[https://google.com/] &#x27;Google&#x27;</span></span><br><span class="line">[<span class="symbol">2</span>]:<span class="link">[https://github.com/] &#x27;Github&#x27;</span></span><br><span class="line">[<span class="symbol">3</span>]:<span class="link">[https://juejin.cn/] &#x27;掘金&#x27;</span></span><br><span class="line">[<span class="symbol">翻译网站</span>]:<span class="link">[https://translate.google.cn/] &#x27;Google翻译&#x27;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108154909883.png" alt="image-20230108154909883"></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>诸如网址或者email之类的链接使用<code>&lt;&gt;</code>包裹即可（在Typora中不使用<code>&lt;&gt;</code>也会显示出链接的效果），例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;http://example.com/&gt;</span></span><br><span class="line"><span class="xml">&lt;address@example.com&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108154926393.png" alt="image-20230108154926393"></p><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>在网页中，锚点其实就是页面内超链接，用以跳转到页面内指定位置。类比到markdown中，就是跳转到文档中的指定位置，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 目标&#123;#target&#125;</span></span><br><span class="line">或者以Html标签的形式（上面的方式笔者在本地Typora使用时跳转失败）</span><br><span class="line"><span class="section">### 目标<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> &gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">跳转到[<span class="string">目标</span>](<span class="link">#target</span>)</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表可以使用星号<code>*</code>、加号<code>+</code>、减号<code>-</code>来表示。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> item1</span><br><span class="line"><span class="bullet">*</span> item2</span><br><span class="line"><span class="bullet">+</span> item3</span><br><span class="line"><span class="bullet">+</span> item4</span><br><span class="line"><span class="bullet">-</span> item5</span><br><span class="line"><span class="bullet">-</span> item6</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108154942929.png" alt="image-20230108154942929"></p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表则使用数字接着一个英文句点。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> item1</span><br><span class="line"><span class="bullet">2.</span> item2</span><br><span class="line"><span class="bullet">3.</span> item3</span><br><span class="line"><span class="bullet">4.</span> item4</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108154952674.png" alt="image-20230108154952674"></p><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><p>任务列表可以用来表示当前项是否完成，其语法形式为：<code>- [ ] Write something here</code>（注意中括号前和中间的空格），<code>[ ]</code>表示未完成，<code>[x]</code>表示已完成，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] item1</span><br><span class="line"><span class="bullet">-</span> [x] item2</span><br><span class="line"><span class="bullet">-</span> [ ] item3</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155001757.png" alt="image-20230108155001757"></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用的语法形式为被引用的文本前加上&gt;符号。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 文本的引用</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155151712.png" alt="image-20230108155151712"></p><h4 id="引用的多层嵌套"><a href="#引用的多层嵌套" class="headerlink" title="引用的多层嵌套"></a>引用的多层嵌套</h4><p>引用可以多层嵌套（也可以叫引用内的引用），只需要根据不同层次加上不同的<code>&gt;</code>即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; &gt; &gt; 内层</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; 中层</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 外层</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155201488.png" alt="image-20230108155201488"></p><h4 id="引用包含其他要素"><a href="#引用包含其他要素" class="headerlink" title="引用包含其他要素"></a>引用包含其他要素</h4><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表等，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; ### title</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 1. item1</span></span><br><span class="line"><span class="quote">&gt; 2. item2</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108160535615.png" alt="image-20230108160535615"></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。</p><h4 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h4><p>行内式的语法形式为<code>![图片Alt](图片地址 &quot;图片Title&quot;)</code>，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Baidu</span>](<span class="link">https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png &quot;百度一下，你就知道&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" alt="Baidu" title="百度一下，你就知道"></p><h4 id="参考式-1"><a href="#参考式-1" class="headerlink" title="参考式"></a>参考式</h4><p>插入图片的参考式和超链接一样，现在文档中要插入的地方写<code>![图片Alt][标记]</code>，再在文档的最后写上<code>[标记]:图片地址 &quot;Title&quot;</code>，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Baidu</span>][<span class="symbol">baidu</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="symbol">baidu</span>]:<span class="link">https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png &quot;百度一下，你就知道&quot;</span></span><br></pre></td></tr></table></figure><h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字，例如：</p><blockquote><p>经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Typora[^tp] 编辑器进行书写。</span><br><span class="line"> </span><br><span class="line">[<span class="symbol">^1</span>]:<span class="link">Markdown是一种纯文本标记语言</span></span><br><span class="line"> </span><br><span class="line">[<span class="symbol">^2</span>]:<span class="link">HyperText Markup Language 超文本标记语言</span></span><br><span class="line"> </span><br><span class="line">[<span class="symbol">^tp</span>]:<span class="link">一款由 Abner Lee 开发的轻量级 Markdown 编辑器</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155249753.png" alt="image-20230108155249753"></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格有的语法形式比较简洁：</p><ol><li>第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行</li><li>列与列之间用管道符<code>|</code>隔开，表格每一行的两边的管道符可以选择不加</li><li>第二行还可以为不同的列指定对齐方向，默认为左对齐，在<code>-</code>右边加上<code>:</code>就右对齐，左右两边都加上就是居中。</li></ol><blockquote><p>您可以使用表格的HTML字符代码（<code>|</code>）在表中显示管道（<code>|</code>）字符。</p></blockquote><p>例子如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">学号 | 姓名 | 分数 </span><br><span class="line">---- | ----:| :---: </span><br><span class="line">张三 | 男   |   60 </span><br><span class="line">李四 | 女   |   60 </span><br><span class="line">王五 | 男   |   60 </span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155301455.png" alt="image-20230108155301455"></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线的语法形式为：一行中使用三个及以上的星号<code>*</code>，减号<code>-</code>，下划线<code>_</code>来生成一个分割线，行内不能有其他内容，在符号之间插入空格没有影响。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> <span class="emphasis">* *</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="strong">__<span class="emphasis">_</span></span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155523370.png" alt="image-20230108155523370"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>对于程序员来说，这个语法可能是必不可少的。语法形式为：</p><ol><li>行内代码，插入一个单词或者一小段代码的时候，用反引号```将代码包裹，例如：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个语言的第一课，可能都是输出<span class="code">`hello world`</span>了。</span><br></pre></td></tr></table></figure><blockquote><p>如果要表示为代码的单词或短语包含一个或多个反引号，可以通过将单词或短语括在双反引号（````）中来对其进行转义。</p></blockquote><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155314653.png" alt="image-20230108155314653"></p><ol><li>  多行代码，在代码块的上下两行分别加上<code>来包裹，在上面的</code>后写上代码块的所属语言，就会显示对应的高亮，例如：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```java</span></span><br><span class="line"><span class="code">public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">    System.out.println(&quot;hello world!&quot;).</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155322107.png" alt="image-20230108155322107"></p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>可以使用反斜杠<code>\</code>转义以下字符，来避免歧义。</p><table><thead><tr><th>字符</th><th>名称</th></tr></thead><tbody><tr><td>\</td><td>反斜杠</td></tr><tr><td>`</td><td>反引号</td></tr><tr><td>*</td><td>星号</td></tr><tr><td>_</td><td>下划线</td></tr><tr><td>{}</td><td>大括号</td></tr><tr><td>[]</td><td>中括号</td></tr><tr><td>()</td><td>括号</td></tr><tr><td>#</td><td>井号</td></tr><tr><td>+</td><td>加号</td></tr><tr><td>-</td><td>减号（连字符）</td></tr><tr><td>.</td><td>点</td></tr><tr><td>!</td><td>感叹号</td></tr><tr><td>|</td><td>管道</td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="HTML代码块"><a href="#HTML代码块" class="headerlink" title="HTML代码块"></a>HTML代码块</h4><p> Markdown 兼容 HTML 原始码，只需要按照HTML的语法编写正确，剩下的 Markdown 都会帮你处理，例如表格还可以表示为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span>值班人员<span class="xml"><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">th</span>&gt;</span></span>星期一<span class="xml"><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">th</span>&gt;</span></span>星期二<span class="xml"><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">th</span>&gt;</span></span>星期三<span class="xml"><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span>张三<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span>李四<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span>王五<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155337211.png" alt="image-20230108155337211"></p><p>Markdown对于HTML良好的支持性成为它良好的扩展，使得我们编写的文档具有更多可能性以及灵活性。</p><h4 id="Emoji图标"><a href="#Emoji图标" class="headerlink" title="Emoji图标"></a>Emoji图标</h4><p>Typora中还支持使用简短的代码来展示Emoji图标，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:smile:</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_images/image-20230108155344746.png" alt="image-20230108155344746"></p><p>详细的列表可以参照<a href="https://blog.csdn.net/fly910905/article/details/119057922">Markdown实用小技巧: 个个用着都很爽_琦彦的博客-CSDN博客_markdown使用技巧</a>中的列表。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/leozhangit/article/details/109224226">Markdown的前世今生 + CSDN的Markdown语法和使用大全_望儿山下小苗圃的博客-CSDN博客</a></li><li><a href="https://baijiahao.baidu.com/s?id=1661648091070066334&wfr=spider&for=pc">诞生 16 周年，Markdown 为什么成了写作神器？</a></li><li><a href="https://blog.csdn.net/vevenlcf/article/details/81134212">Markdown 语法手册 (完整整理版)_tiny丶的博客-CSDN博客_markdown语法</a></li><li><a href="https://blog.csdn.net/weixin_46584887/article/details/122042783">Markdown任务列表(实现列表勾选/非勾选操作)_Z.Q.Feng的博客-CSDN博客_markdown任务列表</a></li><li><a href="https://blog.csdn.net/fly910905/article/details/119057922">Markdown实用小技巧: 个个用着都很爽_琦彦的博客-CSDN博客_markdown使用技巧</a></li><li><a href="http://markdown.p2hp.com/index.html">Markdown 中文网</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Markdown的起源&quot;&gt;&lt;a href=&quot;#Markdown的起源&quot; class=&quot;headerlink&quot; title=&quot;Markdown的起源&quot;&gt;&lt;/a&gt;Markdown的起源&lt;/h2&gt;&lt;p&gt;Markdown最早诞生于2004年，美国科技博主约翰·格鲁伯（Jo</summary>
      
    
    
    
    <category term="Markdown系列" scheme="https://blog.xuyicheng.top/categories/Markdown%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Markdown" scheme="https://blog.xuyicheng.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>初识类图</title>
    <link href="https://blog.xuyicheng.top/2023-01-08-%E5%88%9D%E8%AF%86%E7%B1%BB%E5%9B%BE.html"/>
    <id>https://blog.xuyicheng.top/2023-01-08-%E5%88%9D%E8%AF%86%E7%B1%BB%E5%9B%BE.html</id>
    <published>2023-01-08T03:56:51.991Z</published>
    <updated>2022-06-12T14:03:27.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>UML可以算是软件开发人员的必修课了，其主要用来帮助我们阐明、展示、构建和记录软件系统。今天我们就来讲讲UML中的类图。</p><h2 id="类图简介"><a href="#类图简介" class="headerlink" title="类图简介"></a>类图简介</h2><p>类图描述了系统中对象的类型（即类）以及它们之间存在的各种静态关系。</p><h2 id="主要关系"><a href="#主要关系" class="headerlink" title="主要关系"></a>主要关系</h2><p>类图中存在六大关系，分别是依赖、泛化（继承）、实现、关联、聚合与组合。</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>依赖关系，定义：只要在类中用到了对方，那么它们之间就存在依赖关系。如果没有对方，则编译不能通过。</p><p>依赖在类图中的表示如下图所示。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220612214325840.png" alt="image-20220612214325840"></p><p><strong>属于依赖关系的几种情况（以A类和B类举例说明）：</strong></p><ul><li>A类中用到了B类</li><li>B类是A类的成员属性</li><li>B类作为A类的方法的返回类型</li><li>B类是A类方法中的参数类型</li><li>A类方法中用到B类</li></ul><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>泛化其实就是面向对象中的继承关系，它是依赖关系的特例。</p><p>泛化在类图中的表示如下图所示。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220612215349721.png" alt="image-20220612215349721"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现其实就是面向对象中的实现（类实现接口）关系，它是依赖关系的特例。</p><p>实现在类图中的表示如下图所示。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220612215523207.png" alt="image-20220612215523207"></p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>关联其实就是类与类之间的联系，它是依赖关系的特例。更细分可以分为一对一、一对多、多对多的关系，读者可以自行去深入了解。</p><p>关联在类图中的表示如下图所示。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220612215635597.png" alt="image-20220612215635597"></p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>聚合关系是整体和部分之间的关系，特点是<strong>整体和部分是可以分开</strong>的。聚合关系是关联关系的特例，所以它具有关联的导航性和多重性。</p><p>聚合在类图中的表示如下图所示。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220612220133634.png" alt="image-20220612220133634"></p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p> 组合关系也是整体与部分的关系，但是<strong>整体与部分不可以分开</strong>。<strong>即：整体与部分是同生共死的关系。</strong> </p><p>组合在类图中的表示如下图所示。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220612220323725.png" alt="image-20220612220323725"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.visual-paradigm.com/cn/guide/uml-unified-modeling-language/what-is-uml/">什么是统一建模语言（UML）？ (visual-paradigm.com)</a> 和 <a href="https://blog.csdn.net/qq_42339210/article/details/106714076">类图六大关系总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;UML可以算是软件开发人员的必修课了，其主要用来帮助我们阐明、展示、构建和记录软件系统。今天我们就来讲讲UML中的类图。&lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    <category term="uml系列" scheme="https://blog.xuyicheng.top/categories/uml%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>初识Markdown</title>
    <link href="https://blog.xuyicheng.top/2023-01-08-%E5%88%9D%E8%AF%86MarkDown.html"/>
    <id>https://blog.xuyicheng.top/2023-01-08-%E5%88%9D%E8%AF%86MarkDown.html</id>
    <published>2023-01-08T03:56:51.984Z</published>
    <updated>2023-01-08T07:43:39.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>Markdown是一种<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/52671915">轻量级标记语言</a>，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p><p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，目前许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。 如<a href="https://baike.baidu.com/item/GitHub/10145341">GitHub</a>、<a href="https://baike.baidu.com/item/Reddit/1272010">Reddit</a>、<a href="https://baike.baidu.com/item/Diaspora/10726893">Diaspora</a>、<a href="https://baike.baidu.com/item/Stack%20Exchange/13777796?fr=aladdin">Stack Exchange</a>、<a href="https://baike.baidu.com/item/OpenStreetMap/3171606">OpenStreetMap</a> 、<a href="https://baike.baidu.com/item/SourceForge/6562141">SourceForge</a>、<a href="https://baike.baidu.com/item/%E7%AE%80%E4%B9%A6/5782216">简书</a>等，甚至还能被使用来撰写<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E4%B9%A6/346054">电子书</a>。</p><p><strong>推荐本地文本编辑器：Typora</strong></p><p><strong>下载地址：</strong></p><p><a href="https://typora.io/">Typora官网</a></p><p><img src="https://i.loli.net/2020/12/17/KUfn7LmHTyzwAiE.png" alt="image-20201213161231030"></p><p><strong>PS：请读者在本地新建一个文件，将后缀名改为xxx.md，再用Typora打开</strong></p><p><strong><em>PS：以下皆为代码效果加实现语法</em></strong></p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 标题</span></span><br></pre></td></tr></table></figure><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 二级标题</span></span><br></pre></td></tr></table></figure><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#### 四级标题</span></span><br></pre></td></tr></table></figure><p><strong>PS：最多支持六级标题</strong></p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>Hello，World！ 粗体</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**Hello，World！ 粗体**</span></span><br></pre></td></tr></table></figure><p><em>Hello，World！斜体</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*Hello，World！斜体*</span></span><br></pre></td></tr></table></figure><p><strong><em>Hello，World！粗斜体</em></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*Hello，World！粗斜体<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br></pre></td></tr></table></figure><p><del>Hello，World！划线</del></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~Hello，World！划线~~</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>选择rapstar</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 选择rapstar</span></span><br></pre></td></tr></table></figure><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://www.baidu.com/img/flexible/logo/pc/result@2.png" alt="截图2"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://www.baidu.com/img/flexible/logo/pc/result@2.png)</span><br></pre></td></tr></table></figure><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://www.baidu.com/">点击跳转百度</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">点击跳转百度</span>](<span class="link">https://www.baidu.com/</span>)</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li><p>A</p></li><li><p>B</p></li><li><p>C</p></li></ol><p><strong>1.+空格+内容即可出现顺序列表(输入完一行后回车自动出现 2.)</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> A</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> B</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> C</span><br></pre></td></tr></table></figure><ul><li><p>A</p><ul><li><p>B</p><ul><li>C</li></ul></li></ul></li></ul><p><strong>-+空格+内容即无序列表(同上)，可分级</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> A</span><br><span class="line"></span><br><span class="line"><span class="bullet">  -</span> B</span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> C</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>1997.1.1</td></tr></tbody></table><p><strong>PS：表格较为复杂，推荐在Typora中鼠标右击创建</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>hello</code></p><p>两个`符号包含内容即单行代码格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`hello`</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> </span><br></pre></td></tr></table></figure><p>代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> </span><br><span class="line">​```</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;Markdown是一种&lt;a href=&quot;https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7</summary>
      
    
    
    
    <category term="Markdown系列" scheme="https://blog.xuyicheng.top/categories/Markdown%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Markdown" scheme="https://blog.xuyicheng.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Linux上的springboot+vue项目部署</title>
    <link href="https://blog.xuyicheng.top/2022-05-10-Linux%E4%B8%8A%E7%9A%84springboot-vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2.html"/>
    <id>https://blog.xuyicheng.top/2022-05-10-Linux%E4%B8%8A%E7%9A%84springboot-vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2.html</id>
    <published>2022-05-10T06:11:13.000Z</published>
    <updated>2022-05-10T07:42:18.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>因为笔者最近编写的一个SpringBoot+Vue前后端分离项目需要上线，所以记下这篇文章。除了下面的SpringBoot和Vue的部分，项目设计的数据库例如MySQL、Redis都应该预先配置好，数据库的配置不在本文的讨论范围中。</p><h2 id="SpringBoot部分"><a href="#SpringBoot部分" class="headerlink" title="SpringBoot部分"></a>SpringBoot部分</h2><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><p>笔者这里采用的是JDK的简易安装，安装路径会在默认的<code>/usr/lib/jvm</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询要安装jdk的版本：</span></span><br><span class="line">yum -y list java*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里选择1.8的x86_64，列表中的各版本差别读者可以自行查阅资料</span></span><br><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行完成之后可以运行java命令看是否安装成功</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看环境是否配置，没有出现对应的路径就进行下面的配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在安装成功之后还需要将java配置到环境中</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件最后加上如下的语句（不懂的读者建议直接原封不动复制加入末尾即可）</span></span><br><span class="line">JAVA_HOME=/usr/lib/jvm</span><br><span class="line">CLASS_PATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME CLASS_PATH PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存好上述修改之后，更新使配置生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h3><p>笔者采用的是jar包挂在tomcat的方式，所以还需要下载tomcat，同样采用简易安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -y参数表示安装中的所有选项默认为yes</span></span><br><span class="line">yum -y install tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进到tomcat目录，笔者的目录为/etc/tomcat，进入server.xml进行修改，例如修改端口等</span></span><br></pre></td></tr></table></figure><h2 id="Vue部分"><a href="#Vue部分" class="headerlink" title="Vue部分"></a>Vue部分</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;因为笔者最近编写的一个SpringBoot+Vue前后端分离项目需要上线，所以记下这篇文章。除了下面的SpringBoot和Vue的部分，项</summary>
      
    
    
    
    <category term="Linux操作系列" scheme="https://blog.xuyicheng.top/categories/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="SpringBoot" scheme="https://blog.xuyicheng.top/tags/SpringBoot/"/>
    
    <category term="Vue" scheme="https://blog.xuyicheng.top/tags/Vue/"/>
    
    <category term="Linux" scheme="https://blog.xuyicheng.top/tags/Linux/"/>
    
    <category term="部署" scheme="https://blog.xuyicheng.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Linux上的MySQL操作</title>
    <link href="https://blog.xuyicheng.top/2022-05-09-Linux%E4%B8%8A%E7%9A%84MySQL%E6%93%8D%E4%BD%9C.html"/>
    <id>https://blog.xuyicheng.top/2022-05-09-Linux%E4%B8%8A%E7%9A%84MySQL%E6%93%8D%E4%BD%9C.html</id>
    <published>2022-05-09T05:51:43.000Z</published>
    <updated>2022-05-09T11:46:40.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Linux上的操作可以说是后台程序员的基本功之一，这次我们来讨论在Linux上的MySQL常用操作。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装之前可以启动服务看本机是否已经安装过MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>删除操作不在本文的讨论内容中，如果服务启动成功或者提示服务已经启动，可以停止服务然后跳到下一步配置操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure><p>安装（yum命令自动从网上寻找mysql服务资源，下载至本地并完成安装，安装过程中无脑yes就行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-server</span><br></pre></td></tr></table></figure><p>同时也可以采用自己下载安装包安装的方式，但是比较繁琐，本文不再讨论</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>my.cnf</code>是linux系统中MySQL的配置文档，使用<code>mysql --help | grep &#39;my.cnf&#39;</code>命令即可查看MySQL启动时读取配置文件的默认目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql --<span class="built_in">help</span> | grep <span class="string">&#x27;my.cnf&#x27;</span></span><br><span class="line">                      order of preference, my.cnf, <span class="variable">$MYSQL_TCP_PORT</span>,</span><br><span class="line">/etc/mysql/my.cnf  /etc/my.cnf  ~/.my.cnf</span><br></pre></td></tr></table></figure><p>从上面可以清楚地看到，/etc/mysql/my.cnf、/etc/my.cnf以及~/.my.cnf这些文件就是MySQL启动时默认会依次读取的配置文件，并且顺序排前的优先</p><p>在本机查询出来就是当前系统中默认配置文件的位置，读者需注意自己本机显示的顺序，然后找到对应的位置修改文件</p><p>在笔者的机器中是/etc/my.cnf，所以可以直接使用vi进行编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在[mysqld]下加入<code>skip-grant-tables</code>可以跳过登录验证，不需要输入密码，之后设置好密码之后需要将此行删除或者注释。启动MySQL服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>运行命令进入MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>由于此时没有设置密码，要求你输入密码时直接回车跳过即可，设置密码之后每次都需要输入密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">use mysql;</span><br><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;root_password&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>上述命令中<code>root_password</code>就是设置的密码，读者可以根据自己的需要设置相应的密码，在MySQL命令行状态下，<code>exit</code>命令可以退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>在此之后，只需要重启MySQL服务就可以使用自己设定的密码登录了（要注意去掉配置文件中的<code>skip-grant-tables</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h2 id="开启binlog"><a href="#开启binlog" class="headerlink" title="开启binlog"></a>开启binlog</h2><p>在配置文件中进行如下修改（注意要关闭服务后修改再重启服务）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># binlog config</span></span><br><span class="line"><span class="comment"># 为当前服务取一个唯一的 id（MySQL5.7 之后需要配置）</span></span><br><span class="line">server-id = 1</span><br><span class="line"><span class="comment"># 这个参数表示启用 binlog 功能，并指定 binlog 的存储目录</span></span><br><span class="line">log-bin = /var/lib/mysql/mysql-bin</span><br><span class="line"><span class="comment"># binlog采用的模式（STATEMENT/ROW/MIXED）</span></span><br><span class="line">binlog-format = MIXED</span><br></pre></td></tr></table></figure><p>重启服务后查看binlog开启是否成功，如下就是开启成功后的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;%log_bin%&#x27;;</span><br><span class="line">+---------------------------------+----------------------------------+</span><br><span class="line">| Variable_name                   | Value                            |</span><br><span class="line">+---------------------------------+----------------------------------+</span><br><span class="line">| log_bin                         | ON                               |</span><br><span class="line">| log_bin_basename                | /www/server/data/mysql-bin       |</span><br><span class="line">| log_bin_index                   | /www/server/data/mysql-bin.index |</span><br><span class="line">| log_bin_trust_function_creators | OFF                              |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF                              |</span><br><span class="line">| sql_log_bin                     | ON                               |</span><br><span class="line">+---------------------------------+----------------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><ol><li>首先创建空数据库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;create database abc;</span><br></pre></td></tr></table></figure><ol start="2"><li>导入数据库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 指向创建的数据库</span><br><span class="line">mysql&gt;use abc;</span><br><span class="line"></span><br><span class="line"># 设置编码</span><br><span class="line">mysql&gt;set names utf8;</span><br><span class="line"></span><br><span class="line"># 导入数据（注意sql文件的路径）</span><br><span class="line">mysql&gt;source /home/abc/abc.sql;</span><br></pre></td></tr></table></figure><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>导出数据和表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.sql</span><br><span class="line"># 例如： 路径：/usr/local/mysql/bin/   命令：mysqldump -uroot -p abc &gt; abc.sql</span><br><span class="line"># 以上操作之后sql文件就存在/usr/local/mysql/bin/abc.sql中了</span><br></pre></td></tr></table></figure><p>只导出表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql</span><br><span class="line"># 同上：/usr/local/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.sql</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本文参考<a href="https://blog.csdn.net/Aykl119/article/details/122223582">Linux安装MySQL(超详细)</a>  及 <a href="https://blog.csdn.net/CCqwas/article/details/123535787">MySQL 的 binlog 的三种格式</a>、<a href="https://www.cnblogs.com/linyu51/p/14925666.html">Linux系统MySQL如何导入数据库</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Linux上的操作可以说是后台程序员的基本功之一，这次我们来讨论在Linux上的MySQL常用操作。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Linux操作系列" scheme="https://blog.xuyicheng.top/categories/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="MySQL" scheme="https://blog.xuyicheng.top/tags/MySQL/"/>
    
    <category term="Linux" scheme="https://blog.xuyicheng.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>敏感词替换</title>
    <link href="https://blog.xuyicheng.top/2022-03-23-%E6%95%8F%E6%84%9F%E8%AF%8D%E6%9B%BF%E6%8D%A2.html"/>
    <id>https://blog.xuyicheng.top/2022-03-23-%E6%95%8F%E6%84%9F%E8%AF%8D%E6%9B%BF%E6%8D%A2.html</id>
    <published>2022-03-23T14:27:31.000Z</published>
    <updated>2022-03-23T14:48:04.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在笔者的项目中有一个对敏感词检测并替换的需求，这个需求应该算很常见的，而且也有很多的方式可以解决，主要的解决方式有这几种：</p><ul><li>暴力匹配</li><li>KMP算法</li><li>Trie（字典树）</li><li>AC自动机</li><li>正则匹配</li><li>……</li></ul><p>在本文及笔者的项目中采用了Trie的方式，其他的实现方式笔者感兴趣可以自行了解。采用Trie的优缺点如下：</p><p>优点：</p><ul><li>节省了大量的字符存储空间和字符匹配时间</li><li>随着字典树不断完善，新增的分支会越来越少</li></ul><p>缺点：</p><ul><li>需要一段时间来构建字典树</li><li>效率还不是最优</li></ul><p>下面我们来看看如何实现</p><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><p>Trie也就是字典树，又称单词查找树，<a href="https://baike.baidu.com/item/Trie%E6%A0%91">Trie树</a>，是一种<a href="https://baike.baidu.com/item/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/9663807">树形结构</a>，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6">字符</a>串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p><p>在一般的设计中，要求Trie在结构设计中：</p><ul><li><p>根节点不包含字符，除根节点外每一个节点都只包含一个字符</p></li><li><p>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</p></li><li><p> 每个节点的所有子节点包含的字符都不相同。</p></li></ul><p>本文中的实现也采用上述原则，实现代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单词查找树节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Character data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> end = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Character, TrieNode&gt; nextNodes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nextNodes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">(Character data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        nextNodes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">(<span class="keyword">boolean</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrieNode <span class="title">getNextNode</span><span class="params">(Character data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextNodes.get(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加下一个节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> character 字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> TrieNode&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrieNode <span class="title">addNextNode</span><span class="params">(Character character)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nextNodes.get(character) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            nextNodes.put(character, <span class="keyword">new</span> TrieNode(character));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextNodes.get(character);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="敏感词检测并替换"><a href="#敏感词检测并替换" class="headerlink" title="敏感词检测并替换"></a>敏感词检测并替换</h2><p>在本文中，敏感词检测及替换的原则是先根据敏感词先建立对应的字典树（在项目中要注意将其设为单例的，避免敏感词缺失或者造成空间浪费），然后再根据要检测或修改的字符串逐位进行匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非法词工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IllegalWordMatcher</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置匹配列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matchList 匹配列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMatchList</span><span class="params">(List&lt;String&gt; matchList)</span> </span>&#123;</span><br><span class="line">        matchList.forEach(<span class="keyword">this</span>::addWord);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加单词进Trie</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> word 词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(CharSequence word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word.length();</span><br><span class="line">        TrieNode temp = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            temp = temp.addNextNode(word.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp.addNextNode(word.charAt(n - <span class="number">1</span>)).setEnd(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(CharSequence text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> replace(text, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换敏感词 (线程不安全)</span></span><br><span class="line"><span class="comment">     * 需要先通过 setMatchList 或 addWord 添加屏蔽词</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text    需要检测的文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replace 替换的字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(CharSequence text, Character replace)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前字符为空串</span></span><br><span class="line">        <span class="keyword">if</span> (isBlank(text)) &#123;</span><br><span class="line">            <span class="keyword">return</span> text.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 断言字典树未构建的情况，仅在VM参数加上-ea的情况下生效</span></span><br><span class="line">        <span class="keyword">assert</span> root.getKeyWordCount() != <span class="number">0</span>: <span class="string">&quot;The match trie is null&quot;</span>;</span><br><span class="line"></span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = text.length();</span><br><span class="line">        <span class="comment">// 匹配的字符串起点位置，匹配的当前字符的位置</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        TrieNode temp = root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历字符串</span></span><br><span class="line">        <span class="keyword">while</span> (now &lt; size) &#123;</span><br><span class="line">            TrieNode next = temp.getNextNode(text.charAt(now));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不存在当前字符的非法串开头</span></span><br><span class="line">            <span class="comment">// 将当前字符存入结果集</span></span><br><span class="line">            <span class="comment">// 并移动指针、恢复temp节点开始下一个字符判断</span></span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                result.append(text.charAt(begin));</span><br><span class="line">                now = begin + <span class="number">1</span>;</span><br><span class="line">                begin = now;</span><br><span class="line">                temp = root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 已经找到一个非法词匹配</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (next.isEnd()) &#123;</span><br><span class="line">                <span class="comment">// 填充对应长度的替换符</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= now; i++) &#123;</span><br><span class="line">                    result.append(replace);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 从下一个字符继续开始匹配</span></span><br><span class="line">                now++;</span><br><span class="line">                begin = now;</span><br><span class="line">                temp = root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 存在非法词出现的可能，但是还不确定</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                now++;</span><br><span class="line">                temp = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result.append(text.subSequence(begin, text.length()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前字符是否合法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLegal</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前字符为空串</span></span><br><span class="line">        <span class="keyword">if</span> (isBlank(text)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 断言字典树未构建的情况，仅在VM参数加上-ea的情况下生效</span></span><br><span class="line">        <span class="keyword">assert</span> root.getKeyWordCount() != <span class="number">0</span>: <span class="string">&quot;The match trie is null&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = text.length();</span><br><span class="line">        <span class="comment">// 匹配的字符串起点位置，匹配的当前字符的位置</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        TrieNode temp = root;</span><br><span class="line">        <span class="keyword">char</span>[] textChars = text.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历字符串</span></span><br><span class="line">        <span class="keyword">while</span> (now &lt; size) &#123;</span><br><span class="line">            TrieNode next = temp.getNextNode(text.charAt(now));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不存在当前字符的非法串开头</span></span><br><span class="line">            <span class="comment">// 将当前字符存入结果集</span></span><br><span class="line">            <span class="comment">// 并移动指针、恢复temp节点开始下一个字符判断</span></span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                now = begin + <span class="number">1</span>;</span><br><span class="line">                begin = now;</span><br><span class="line">                temp = root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 已经找到一个非法词匹配</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (next.isEnd()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 存在非法词出现的可能，但是还不确定</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                now++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串判空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charSequence 年代</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBlank</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (charSequence == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.contentEquals(charSequence)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charSequence.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (charSequence.charAt(i) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次的分享就到这里了，建议读者可以自己实现一下，在这里还推荐一款高性能非法词(敏感词)检测组件 <a href="https://github.com/toolgood/ToolGood.Words">ToolGood.Words(Java版)</a>，支持多语言版本，感兴趣的读者还可以看看源码参照他的实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;在笔者的项目中有一个对敏感词检测并替换的需求，这个需求应该算很常见的，而且也有很多的方式可以解决，主要的解决方式有这几种：&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="项目实战系列" scheme="https://blog.xuyicheng.top/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="字典树" scheme="https://blog.xuyicheng.top/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
    <category term="字符串" scheme="https://blog.xuyicheng.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>模板方法模式</title>
    <link href="https://blog.xuyicheng.top/2022-03-21-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://blog.xuyicheng.top/2022-03-21-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html</id>
    <published>2022-03-21T12:33:38.000Z</published>
    <updated>2022-03-21T13:49:57.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对模板方法模式进行具体实现举例。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在下面的例子中，我们使用模板方法模式来对子类共有的方法或者方法逻辑进行抽象，就像预先设计一个模板一样，下面采用抽象类来举例，但是采用接口也可以做到类似的效果（JDK8之后接口支持default方法），我们以游戏来作为例子（手动狗头）：</p><h3 id="模板抽象类"><a href="#模板抽象类" class="headerlink" title="模板抽象类"></a>模板抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 游戏模板</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GameTemplate</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 开始</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 玩</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 结束</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 玩游戏</span></span><br><span class="line"><span class="comment">         * 此处就是预先定义好的方法逻辑</span></span><br><span class="line"><span class="comment">         * 子类不可重写修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            init();</span><br><span class="line">            load();</span><br><span class="line">            start();</span><br><span class="line">            end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 加载</span></span><br><span class="line"><span class="comment">         * 这是模板抽象类预先设定好的模板方法</span></span><br><span class="line"><span class="comment">         * 子类可以重写修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在加载数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="子类实现类"><a href="#子类实现类" class="headerlink" title="子类实现类"></a>子类实现类</h3><p>可以看到我们的子类简化了很多公共的部分，更加整洁清晰了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原神</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Genshin</span> <span class="keyword">extends</span> <span class="title">GameTemplate</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;原神&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;提瓦特大陆的星空永远会有你的位置&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 腾讯</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Tencent</span> <span class="keyword">extends</span> <span class="title">GameTemplate</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;TiMi&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开始游戏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你充Q币吗？&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对模板方法模式进行具体实现举例。&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="https://blog.xuyicheng.top/2022-03-21-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://blog.xuyicheng.top/2022-03-21-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html</id>
    <published>2022-03-21T06:26:39.000Z</published>
    <updated>2022-03-21T13:14:13.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对策略模式进行具体实现举例。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>策略模式就像为各种情况设计对应的锦囊一样，锦囊可以任意使用，“军师”（编码者）也可以随时替换锦囊的内容。在下面的例子中，我们使用策略模式来对多个if-else的情况来进行优化。</p><h3 id="原来的if-else"><a href="#原来的if-else" class="headerlink" title="原来的if-else"></a>原来的if-else</h3><p>此处用两数运算来举例，可以看到在原来的设计中，我们需要设立多个if-else分支。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String ADD = <span class="string">&quot;+&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SUBTRACT = <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String MULTIPLY = <span class="string">&quot;*&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DIVIDE = <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原来的解决流程</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a      一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b      b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol 符号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeCount</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, String symbol)</span> </span>&#123;</span><br><span class="line">    Integer result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个if-else的分支判断</span></span><br><span class="line">    <span class="keyword">if</span> (ADD.equals(symbol)) &#123;</span><br><span class="line">        result = a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (SUBTRACT.equals(symbol)) &#123;</span><br><span class="line">        result = a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (MULTIPLY.equals(symbol)) &#123;</span><br><span class="line">        result = a * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (DIVIDE.equals(symbol)) &#123;</span><br><span class="line">        result = b == <span class="number">0</span>? <span class="keyword">null</span>: a / b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用策略模式后"><a href="#使用策略模式后" class="headerlink" title="使用策略模式后"></a>使用策略模式后</h3><p>我们使用一个策略接口作为公共接口（CalculateStrategy接口），然后设立具体的实现类（CalculateAdd、CalculateSubtract、CalculateMultiply、CalculateDivide），在使用只需要创建对应的类即可。在本例中的场景及实现可能略显繁琐，但是在实际应用的时候在遇到多个判断逻辑类似的if-else分支时，可以选用策略模式创建策略接口及类来使用。</p><p>策略模式有如下优劣：</p><p>优点：</p><ul><li>具体实现方式自由<ul><li>结合Map来简化调用，比如本文中的例子，可以将CalculateXX的实现对象存进一个Map，然后在调用处根据设定的key值直接调用即可</li><li>结合模板方法模式来简化策略类的编写，模板方法模式可以将公共的方法或者方法执行逻辑都放在一个模板抽象类或接口（JDK8开始支持的default方法）去预先实现好，这样子类就可以直接使用</li></ul></li><li> 避免了多重条件判断</li><li> 扩展性良好</li><li> 策略类具体实现方式与客户端无关，其中的具体实现只由当前类知晓</li></ul><p>缺点：</p><ul><li>要编写多个策略类</li><li> 所有策略类要向外暴露</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 策略</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> CalculateStrategy strategy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">(CalculateStrategy strategy)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> a a</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> b b</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            System.out.println(strategy.count(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算策略接口，通过实现不同的实现类来给出对应的策略</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">CalculateStrategy</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> a a</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> b b</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Integer&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function">Integer <span class="title">count</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculateAdd</span> <span class="keyword">implements</span> <span class="title">CalculateStrategy</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">count</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算减去</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculateSubtract</span> <span class="keyword">implements</span> <span class="title">CalculateStrategy</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">count</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算乘积</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculateMultiply</span> <span class="keyword">implements</span> <span class="title">CalculateStrategy</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">count</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算除法</span></span><br><span class="line"><span class="comment">     * 以返回null来代表被除数不合法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculateDivide</span> <span class="keyword">implements</span> <span class="title">CalculateStrategy</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">count</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> b == <span class="number">0</span>? <span class="keyword">null</span>: a * b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/design-pattern/strategy-pattern.html">策略模式</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对策略模式进行具体实现举例。&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://blog.xuyicheng.top/2022-03-15-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://blog.xuyicheng.top/2022-03-15-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html</id>
    <published>2022-03-15T09:41:55.000Z</published>
    <updated>2022-03-15T14:17:17.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对代理模式进行具体实现举例。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>代理模式在不同语言的实现以及对应机制不太一样，所以在此对代理模式原理进行阐述。</p><p>实现目的：</p><p>代理模式意图提供一种代理以控制对这个对象的访问，在Spring当中的典型应用是AOP，在调用目标对象方法时，做前置、后置、异常等处理。</p><p>在Spring当中，代理模式的实现主要分为JDK动态代理和CGLIB动态代理。下面我们对他们分别来实验并比较。</p><h2 id="被代理的接口及类"><a href="#被代理的接口及类" class="headerlink" title="被代理的接口及类"></a>被代理的接口及类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 研究</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打个招呼</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 孩子</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 玩</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汤姆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tom</span> <span class="keyword">implements</span> <span class="title">Student</span>, <span class="title">Child</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 研究</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;studying...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 玩</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;playing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK动态代理实例"><a href="#JDK动态代理实例" class="headerlink" title="JDK动态代理实例"></a>JDK动态代理实例</h2><p>在下面的例子中，我们使用Java原生的JDK动态代理来生成代理对象，因为JDK动态代理是基于接口的，所以这里我们生成Student接口和Child接口的代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK动态代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 被代理对象</span></span><br><span class="line">        Student tom = <span class="keyword">new</span> Tom();</span><br><span class="line">        <span class="comment">// 目标处理Handle</span></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandlerImpl(tom);</span><br><span class="line">        <span class="comment">// 目标的类加载器</span></span><br><span class="line">        ClassLoader loader = tom.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">// 获得被代理对象的所有接口</span></span><br><span class="line">        Class[] interfaces = tom.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对Student接口进行代理</span></span><br><span class="line">        Student agentStudent = (Student) Proxy.newProxyInstance(loader, interfaces, handler);</span><br><span class="line">        <span class="comment">// 对Child接口进行代理</span></span><br><span class="line">        Child agentChild = (Child) Proxy.newProxyInstance(loader, interfaces, handler);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 各个接口代理类分别测试</span></span><br><span class="line">        agentStudent.study();</span><br><span class="line">        agentStudent.sayHi();</span><br><span class="line">        agentChild.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用处理程序实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/15</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InvocationHandlerImpl</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 目标</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Object target;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InvocationHandlerImpl</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.target = target;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> proxy  代理</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> method 方法</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> args   arg游戏</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object&#125;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> Throwable throwable</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="comment">// 对method进行筛选来实现对指定方法代理</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;study&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Before agent...(except study)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 此处invoke方法的第一个参数不适用proxy对象是因为proxy对象是代理后对象，使用proxy对不断重复调用自身</span></span><br><span class="line">            Object obj = method.invoke(target, args);</span><br><span class="line">            System.out.println(<span class="string">&quot;After agent...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h2><p>在下面的例子中，我们使用CGLIB开源项目下的包来实现基于CGLIB的动态代理。因为CGLIB是基于继承实现的，所以我们在这里对Tom类来进行增强（也就是代理）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cglibagent</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CGLIBAgent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 增强器</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 指定代理类类型</span></span><br><span class="line">        enhancer.setSuperclass(Tom.class);</span><br><span class="line">        <span class="comment">// 设置回调器，也就是对目标对象的代理器</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyMethodInterceptor());</span><br><span class="line">        <span class="comment">// 生成代理对象</span></span><br><span class="line">        Tom agentTom = (Tom) enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 各种方法都被拦截了</span></span><br><span class="line">        agentTom.study();</span><br><span class="line">        agentTom.sayHi();</span><br><span class="line">        agentTom.play();</span><br><span class="line">        agentTom.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义方法拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o           o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects     对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 方法代理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 例如下，我们可以对method进行筛选来进行指定方法的增强</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;play&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;before intercept...(except play)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object obj = methodProxy.invokeSuper(o, objects);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;study&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;after intercept...(except study)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK动态代理和CGLIB动态代理的异同"><a href="#JDK动态代理和CGLIB动态代理的异同" class="headerlink" title="JDK动态代理和CGLIB动态代理的异同"></a>JDK动态代理和CGLIB动态代理的异同</h2><ul><li>JDK动态代理是java原生的，基于拦截器（必须实现InvocationHandler）及反射机制生成代理指定接口的匿名类，在使用具体的方法前会被InvokeHandler拦截处理</li><li>CGLIB是利用ASM框架将代理对象类生成的class文件加载进来，通过修改其字节码来生成子类</li><li>JDK动态代理只能对实现了接口的类生成代理，而不能针对类</li><li>Cglib是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，并覆盖其中方法的增强，但是因为采用的是继承，所以该类或方法最好不要生成final，对于final类或方法，是无法继承的</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/sandaman2019/p/12636727.html">Cglib和jdk动态代理的区别</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对代理模式进行具体实现举例。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://blog.xuyicheng.top/2022-03-14-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://blog.xuyicheng.top/2022-03-14-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html</id>
    <published>2022-03-14T14:41:45.000Z</published>
    <updated>2022-03-14T15:02:17.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对单例模式进行具体实现举例。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在下面的例子中，我们使用单例模式来保证每次生成的对象都是唯一的。</p><h3 id="统一接口"><a href="#统一接口" class="headerlink" title="统一接口"></a>统一接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SingletonObject</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> <span class="keyword">implements</span> <span class="title">SingletonObject</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hungry instance = <span class="keyword">new</span> Hungry();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造，避免外部利用 new 创建实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到实例通过饿汉式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Singleton&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstanceByHungry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyBones</span> <span class="keyword">implements</span> <span class="title">SingletonObject</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyBones instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造，避免外部利用 new 创建实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyBones</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到实例通过懒汉式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Singleton&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazyBones <span class="title">getInstanceByLazyBones</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> LazyBones();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双重锁检测"><a href="#双重锁检测" class="headerlink" title="双重锁检测"></a>双重锁检测</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Double-checked locking</span></span><br><span class="line"><span class="comment"> * 双重锁检测</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DCL</span> <span class="keyword">implements</span> <span class="title">SingletonObject</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DCL instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造，避免外部利用 new 创建实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DCL</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到实例通过双重锁检测</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Singleton&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> DCL <span class="title">getInstanceByDCL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一重检测，检测实例是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 此处锁住DCL类以保证对象唯一性</span></span><br><span class="line">            <span class="keyword">synchronized</span> (DCL.class) &#123;</span><br><span class="line">                <span class="comment">// 第二重检测，避免在锁争夺时重复生成实例</span></span><br><span class="line">                <span class="comment">// 例如：A、B都在争抢锁</span></span><br><span class="line">                <span class="comment">// A率先拿到锁，生成实例并获取后释放锁</span></span><br><span class="line">                <span class="comment">// B拿到锁，假如没有第二重检测，B会再度创建一个实例破坏单例性</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> DCL();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span> <span class="keyword">implements</span> <span class="title">SingletonObject</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造，避免外部利用 new 创建实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到实例通过静态内部类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> StaticInnerClass&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClass <span class="title">getInstanceByStaticInnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/03/10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerClass INSTANCE = <span class="keyword">new</span> StaticInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/03/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Enum</span> <span class="keyword">implements</span> <span class="title">SingletonObject</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Enum <span class="title">getInstanceByEnum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>笔者在进行测试时将上面的所有接口及类以及下面的测试类写在一个java文件中，测试结果在不同电脑不同时间上可能有所不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">    Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">    printInfo(<span class="string">&quot;普通创建&quot;</span>, o1, o2);</span><br><span class="line"></span><br><span class="line">    SingletonObject s1 = Hungry.getInstanceByHungry();</span><br><span class="line">    SingletonObject s2 = Hungry.getInstanceByHungry();</span><br><span class="line">    printInfo(<span class="string">&quot;饿汉式&quot;</span>, s1, s2);</span><br><span class="line"></span><br><span class="line">    s1 = LazyBones.getInstanceByLazyBones();</span><br><span class="line">    s2 = LazyBones.getInstanceByLazyBones();</span><br><span class="line">    printInfo(<span class="string">&quot;懒汉式&quot;</span>, s1, s2);</span><br><span class="line"></span><br><span class="line">    s1 = DCL.getInstanceByDCL();</span><br><span class="line">    s2 = DCL.getInstanceByDCL();</span><br><span class="line">    printInfo(<span class="string">&quot;双重锁检测&quot;</span>, s1, s2);</span><br><span class="line"></span><br><span class="line">    s1 = StaticInnerClass.getInstanceByStaticInnerClass();</span><br><span class="line">    s2 = StaticInnerClass.getInstanceByStaticInnerClass();</span><br><span class="line">    printInfo(<span class="string">&quot;静态内部类&quot;</span>, s1, s2);</span><br><span class="line"></span><br><span class="line">    s1 = Enum.getInstanceByEnum();</span><br><span class="line">    s2 = Enum.getInstanceByEnum();</span><br><span class="line">    printInfo(<span class="string">&quot;枚举类&quot;</span>, s1, s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(String way, Object s1, Object s2)</span> </span>&#123;</span><br><span class="line">    System.out.println(way + <span class="string">&quot;: &quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;s1 = &quot;</span> + s1);</span><br><span class="line">    System.out.println(<span class="string">&quot;s2 = &quot;</span> + s2);</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">普通创建: </span><br><span class="line">s1 = java.lang.Object@404b9385</span><br><span class="line">s2 = java.lang.Object@6d311334</span><br><span class="line"></span><br><span class="line">饿汉式: </span><br><span class="line">s1 = designPattern.Hungry@682a0b20</span><br><span class="line">s2 = designPattern.Hungry@682a0b20</span><br><span class="line"></span><br><span class="line">懒汉式: </span><br><span class="line">s1 = designPattern.LazyBones@3d075dc0</span><br><span class="line">s2 = designPattern.LazyBones@3d075dc0</span><br><span class="line"></span><br><span class="line">双重锁检测: </span><br><span class="line">s1 = designPattern.DCL@214c265e</span><br><span class="line">s2 = designPattern.DCL@214c265e</span><br><span class="line"></span><br><span class="line">静态内部类: </span><br><span class="line">s1 = designPattern.StaticInnerClass@448139f0</span><br><span class="line">s2 = designPattern.StaticInnerClass@448139f0</span><br><span class="line"></span><br><span class="line">枚举类: </span><br><span class="line">s1 = INSTANCE</span><br><span class="line">s2 = INSTANCE</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对单例模式进行具体实现举例。&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据库表中的salt是什么</title>
    <link href="https://blog.xuyicheng.top/2022-03-04-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E4%B8%AD%E7%9A%84salt%E6%98%AF%E4%BB%80%E4%B9%88.html"/>
    <id>https://blog.xuyicheng.top/2022-03-04-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E4%B8%AD%E7%9A%84salt%E6%98%AF%E4%BB%80%E4%B9%88.html</id>
    <published>2022-03-04T12:49:49.000Z</published>
    <updated>2022-03-04T14:33:48.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在数据库的user表中我们通常可以看到一个叫做salt的字段，salt大家很容易就知道意思是盐，大家一开始接触可能感觉很奇怪，为何用户要有一个“盐”属性？我们可以上维基查一下定义：</p><blockquote><p>盐（Salt）</p><p>在密码学中，是指通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符，这种过程称之为“加盐”。</p></blockquote><p>以上这段话是维基百科上中对于 Salt 的定义，但是仅凭这句话还是很难理解什么叫 Salt，以及它究竟在用户表里面会起到什么样的作用。接下来我们就以用户表的设计开始来揭示“salt”的必要性。</p><h2 id="数据表设计"><a href="#数据表设计" class="headerlink" title="数据表设计"></a>数据表设计</h2><h3 id="直接设计"><a href="#直接设计" class="headerlink" title="直接设计"></a>直接设计</h3><p>我们在设计用户表时，首当其冲需要设计用户名（或账号）以及密码，这两个字段可以说是用户表的核心，一个表示用户的唯一身份，一个表示和唯一身份相匹配的登录凭证。所以我们的用户表至少要设计成这样：</p><table><thead><tr><th align="center">字段名</th><th align="center">类型</th><th align="center">是否为空</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">username</td><td align="center">varchar(50)</td><td align="center">no</td><td align="center">用户名</td></tr><tr><td align="center">password</td><td align="center">varchar(100)</td><td align="center">no</td><td align="center">密码</td></tr><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">……</td></tr></tbody></table><blockquote><p>PS：这里设计的数据表默认为MySQL中的表，下同</p></blockquote><p>在这样的数据表中，我们可以直接存储用户名和密码，在进行验证时也可以直接根据用户名匹配密码即可。但是随之带来了安全问题，例如在数据库中存储的是如下数据：</p><table><thead><tr><th align="center">……</th><th align="center">username</th><th align="center">password</th><th align="center">……</th></tr></thead><tbody><tr><td align="center">……</td><td align="center">zhangsan</td><td align="center">123456</td><td align="center">……</td></tr><tr><td align="center">……</td><td align="center">lisi</td><td align="center">lisi</td><td align="center">……</td></tr></tbody></table><p>一旦数据中的数据被违法获取或者因为机制泄漏，那么用户的密码就形同虚设，数据盗用者可以利用用户名和密码进行各种操作，损害用户的权益。</p><p>看到这里，读者想必也能意识到在数据库存储明文密码的危害了。</p><h3 id="转化密文"><a href="#转化密文" class="headerlink" title="转化密文"></a>转化密文</h3><p>可能有读者会想，明文不行，我用加密算法（下面演示采用md5加密）加密成密文再存不就行了，那我们继续来看：</p><p>稍稍对表进行修改，</p><table><thead><tr><th align="center">字段名</th><th align="center">类型</th><th align="center">是否为空</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">username</td><td align="center">varchar(50)</td><td align="center">no</td><td align="center">用户名</td></tr><tr><td align="center">pwd_hash</td><td align="center">varchar(100)</td><td align="center">no</td><td align="center">hash运算之后的密码</td></tr><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">……</td></tr></tbody></table><p>然后其中的数据变成了：</p><table><thead><tr><th align="center">……</th><th align="center">username</th><th align="center">pass_hash</th><th align="center">……</th></tr></thead><tbody><tr><td align="center">……</td><td align="center">zhangsan</td><td align="center">e10adc3949ba59abbe56e057f20f883e</td><td align="center">……</td></tr><tr><td align="center">……</td><td align="center">lisi</td><td align="center">dc3a8f1670d65bea69b7b65048a0ac40</td><td align="center">……</td></tr><tr><td align="center">……</td><td align="center">wangwu</td><td align="center">e10adc3949ba59abbe56e057f20f883e</td><td align="center">……</td></tr></tbody></table><p>这样是不是看起来比原来存的密文是不是安全多了，不过细心的读者可能发现了，用户zhangsan和wangwu进行md5运算之后的密码是一样的，代表他们原来的密码也是一样的。那么如果数据盗用者有一本小本本，记录着很多很多的加密前的密码和加密后的值的对应记录，现在计算机的运行速度那么快，简单的密码在被盗取后，也就比原来明文的获取多了一点破解时间而已。这样看来单纯的明文还是不能保证用户的密码安全性。</p><h3 id="“加盐”"><a href="#“加盐”" class="headerlink" title="“加盐”"></a>“加盐”</h3><p>正如炒菜的味道不够需要加盐一样，原来简单的加密不再能保证100%的安全了，毕竟谁也不知道你的密码没有别人用过或者没有以前被人破解记录过。于是salt应运而生，正如上述维基百科中所述“通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符”，这句话可能还是不太好理解，直接上例子：</p><table><thead><tr><th align="center">字段名</th><th align="center">类型</th><th align="center">是否为空</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">username</td><td align="center">varchar(50)</td><td align="center">no</td><td align="center">用户名</td></tr><tr><td align="center">pwd_hash</td><td align="center">varchar(100)</td><td align="center">no</td><td align="center">hash运算之后的密码</td></tr><tr><td align="center">salt</td><td align="center">varchar(30)</td><td align="center">no</td><td align="center">加密用盐值</td></tr><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">……</td></tr></tbody></table><p>Salt 可以是任意字母、数字、或是字母或数字的组合，但必须是随机产生的，每个用户的 Salt 都不一样，用户注册的时候，数据库中存入的不是明文密码，也不是简单的对明文密码进行散列，而是 加密(明文密码 + Salt)，salt所在的位置任意，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MD5(&#x27;123456&#x27; + &#x27;2blfq0jgqus6ki13mkf81xt7dg&#x27;) = &#x27;a69b7f5a9c65a35eb3d9b826d3bf05b2&#x27;</span><br><span class="line">MD5(&#x27;lisi&#x27; + &#x27;t5s198thbqveyjactdt7h91bwa&#x27;) = &#x27;e6e21083351279c61bbe742e536525f4&#x27;</span><br><span class="line">MD5(&#x27;123456&#x27; + &#x27;dflhsgyu5flnmwn2qpzoa2mmwq&#x27;) = &#x27;8da7d8f7f313b8adbc82d99bfb98528c&#x27;</span><br></pre></td></tr></table></figure><p>这种方法相对就已经很保险了，因为数据盗用者无从得知你的盐值到底加在何处，你甚至可以在服务器代码上自定义序列，然后在对应序列位置交错穿插盐值（序列的第n位就是密码第n位插入盐值的位置），例如序列为斐波那契数列{1，1，2，3，5，8，13，……}，那么按照密码长度将其穿插进盐值，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD5(2[12]b[3]lf[4]q0[5]jgq[6]us6ki13mkf81xt7dg) = &#x27;c13e8cb039e818b933d4b30e7c348330&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>程序设计时应根据业务需求灵活调整，以上序列穿插法仅供参考。</p></blockquote><p>这样一来，破解难度就大大提升，最大程度的保证了用户的密码安全性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>相信读者看到这里，大概心里已经对用户表中salt的存在已经掌握，但是笔者在这里还是要提个醒，虽然进行更严密更复杂的加密手段可以保护用户密码，但是随之而来还有进行解密时的复杂性，会造成用户登录的时间影响，所以建议笔者还是根据实际需求，在验证时间和加密程度中做一个平衡。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>本文部分内容参考 <a href="https://blog.csdn.net/yang1982_0907/article/details/43483205">密码学中的“盐值 Salt”</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;在数据库的user表中我们通常可以看到一个叫做salt的字段，salt大家很容易就知道意思是盐，大家一开始接触可能感觉很奇怪，为何用户要有一</summary>
      
    
    
    
    <category term="数据库系列" scheme="https://blog.xuyicheng.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="数据库" scheme="https://blog.xuyicheng.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>黄金矿工</title>
    <link href="https://blog.xuyicheng.top/2022-02-05-%E9%BB%84%E9%87%91%E7%9F%BF%E5%B7%A5.html"/>
    <id>https://blog.xuyicheng.top/2022-02-05-%E9%BB%84%E9%87%91%E7%9F%BF%E5%B7%A5.html</id>
    <published>2022-02-05T02:58:13.000Z</published>
    <updated>2022-02-05T03:05:05.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="力扣-1219-黄金矿工"><a href="#力扣-1219-黄金矿工" class="headerlink" title="力扣 1219. 黄金矿工"></a>力扣 <a href="https://leetcode-cn.com/problems/path-with-maximum-gold/">1219. 黄金矿工</a></h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><p>你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 <code>m * n</code> 的网格 <code>grid</code> 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 <code>0</code>。</p><p>为了使收益最大化，矿工需要按以下规则来开采黄金：</p><ul><li>每当矿工进入一个单元，就会收集该单元格中的所有黄金。</li><li>矿工每次可以从当前位置向上下左右四个方向走。</li><li>每个单元格只能被开采（进入）一次。</li><li><strong>不得开采</strong>（进入）黄金数目为 <code>0</code> 的单元格。</li><li>矿工可以从网格中 <strong>任意一个</strong> 有黄金的单元格出发或者是停止。</li></ul><p><strong>提示：</strong></p><ul><li><code>1 &lt;= grid.length, grid[i].length &lt;= 15</code></li><li><code>0 &lt;= grid[i][j] &lt;= 100</code></li><li>最多 <strong>25</strong> 个单元格中有黄金。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[0,6,0],[5,8,7],[0,9,0]] </span><br><span class="line">输出：24 </span><br><span class="line">解释： [[0,6,0], [5,8,7], [0,9,0]] 一种收集最多黄金的路线是：9 -&gt; 8 -&gt; 7。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]] </span><br><span class="line">输出：28 </span><br><span class="line">解释： [[1,0,7], [2,0,6], [3,4,5], [0,3,0], [9,0,20]] </span><br><span class="line">一种收集最多黄金的路线是：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7。</span><br></pre></td></tr></table></figure><h3 id="笔者理解"><a href="#笔者理解" class="headerlink" title="笔者理解"></a>笔者理解</h3><p>此题是一道数组算法问题，在力扣题库中被定义为中等题。 </p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>当笔者阅读完此题后，<strong>发现此题很经典得DFS，按部就班即可</strong>，让我们来看看具体如何实现的吧。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DFS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result, row, column;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转向位移</span></span><br><span class="line">    <span class="keyword">int</span>[] turnX = &#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] turnY = &#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaximumGold</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        row = grid.length;</span><br><span class="line">        column = grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 标记是否走过</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] ticks = <span class="keyword">new</span> <span class="keyword">boolean</span>[row][column];</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    ticks[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                    dfs(grid, ticks, i, j, grid[i][j]);</span><br><span class="line">                    ticks[i][j] = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dfs</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> grid  单元格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ticks 标记</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x0    x0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y0    y0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 黄金数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">boolean</span>[][] ticks, <span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isTurn = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = x0 + turnX[i];</span><br><span class="line">            <span class="keyword">int</span> y = y0 + turnY[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (judge(x, y) &amp;&amp; grid[x][y] != <span class="number">0</span> &amp;&amp; !ticks[x][y]) &#123;</span><br><span class="line">                isTurn = <span class="keyword">true</span>;</span><br><span class="line">                ticks[x][y] = <span class="keyword">true</span>;</span><br><span class="line">                dfs(grid, ticks, x, y, count + grid[x][y]);</span><br><span class="line">                ticks[x][y] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isTurn) &#123;</span><br><span class="line">            result = Math.max(result, count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前坐标是否越界</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; (x - row) * (y - column) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间、空间效率还行，可见此解法还比较适合此题。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220205110337510.png" alt="image-20220205110337510"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本题是今天的每日一题，难度是为中等，感兴趣的朋友都可以去尝试一下，此题还有其他更多的解法，朋友们可以自己逐一尝试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;力扣-1219-黄金矿工&quot;&gt;&lt;a href=&quot;#力扣-1219-黄金矿工&quot; class=&quot;headerlink&quot; title=&quot;力扣 1219. 黄金矿工&quot;&gt;&lt;/a&gt;力扣 &lt;a href=&quot;https://leetcode-cn.com/problems/path</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.xuyicheng.top/tags/java/"/>
    
    <category term="数组" scheme="https://blog.xuyicheng.top/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="深度优先搜索" scheme="https://blog.xuyicheng.top/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>游戏中弱角色的数量</title>
    <link href="https://blog.xuyicheng.top/2022-01-28-%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F.html"/>
    <id>https://blog.xuyicheng.top/2022-01-28-%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F.html</id>
    <published>2022-01-28T11:04:56.000Z</published>
    <updated>2022-01-28T11:08:02.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="力扣-1996-游戏中弱角色的数量"><a href="#力扣-1996-游戏中弱角色的数量" class="headerlink" title="力扣 1996. 游戏中弱角色的数量"></a>力扣 <a href="https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/">1996. 游戏中弱角色的数量</a></h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><p>你正在参加一个多角色游戏，每个角色都有两个主要属性：<strong>攻击</strong> 和 <strong>防御</strong> 。给你一个二维整数数组 <code>properties</code> ，其中 <code>properties[i] = [attacki, defensei]</code> 表示游戏中第 <code>i</code> 个角色的属性。</p><p>如果存在一个其他角色的攻击和防御等级 <strong>都严格高于</strong> 该角色的攻击和防御等级，则认为该角色为 <strong>弱角色</strong> 。更正式地，如果认为角色 <code>i</code> <strong>弱于</strong> 存在的另一个角色 <code>j</code> ，那么 <code>attackj &gt; attacki</code> 且 <code>defensej &gt; defensei</code> 。</p><p>返回 <strong>弱角色</strong> 的数量。</p><p><strong>提示：</strong></p><ul><li><code>2 &lt;= properties.length &lt;= 10^5</code></li><li><code>properties[i].length == 2</code></li><li><code>1 &lt;= attacki, defensei &lt;= 10^5</code></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：properties = [[5,5],[6,3],[3,6]]</span><br><span class="line">输出：0</span><br><span class="line">解释：不存在攻击和防御都严格高于其他角色的角色。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：properties = [[2,2],[3,3]]</span><br><span class="line">输出：1</span><br><span class="line">解释：第一个角色是弱角色，因为第二个角色的攻击和防御严格大于该角色。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：properties = [[1,5],[10,4],[4,3]]</span><br><span class="line">输出：1</span><br><span class="line">解释：第三个角色是弱角色，因为第二个角色的攻击和防御严格大于该角色。</span><br></pre></td></tr></table></figure><h3 id="笔者理解"><a href="#笔者理解" class="headerlink" title="笔者理解"></a>笔者理解</h3><p>此题是一道数组算法问题，在力扣题库中被定义为中等题。 </p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>当笔者阅读完此题后，<strong>发现我们可以直接按照攻击降序，攻击相同时防御升序排序</strong>，让我们来看看具体如何实现的吧。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfWeakCharacters</span><span class="params">(<span class="keyword">int</span>[][] properties)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 按照攻击降序，攻击相同时防御升序排序</span></span><br><span class="line">    Arrays.sort(properties, (p1, p2) -&gt; p1[<span class="number">0</span>] == p2[<span class="number">0</span>]? p1[<span class="number">1</span>] - p2[<span class="number">1</span>]: p2[<span class="number">0</span>] - p1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目前最大的防御力</span></span><br><span class="line">    <span class="keyword">int</span> max = properties[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照攻击降序，攻击相同时防御升序排序后，</span></span><br><span class="line">    <span class="comment">// 这时我们向后遍历，反正攻击力是递减的，只要碰到防御力比之前角色最大防御力小的角色就计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; properties.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &gt; properties[i][<span class="number">1</span>]) &#123;</span><br><span class="line">            result++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            max = properties[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间、空间效率还行，可见此解法还比较适合此题。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220128190729773.png" alt="image-20220128190729773"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本题是今天的每日一题，难度是为中等，感兴趣的朋友都可以去尝试一下，此题还有其他更多的解法，朋友们可以自己逐一尝试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;力扣-1996-游戏中弱角色的数量&quot;&gt;&lt;a href=&quot;#力扣-1996-游戏中弱角色的数量&quot; class=&quot;headerlink&quot; title=&quot;力扣 1996. 游戏中弱角色的数量&quot;&gt;&lt;/a&gt;力扣 &lt;a href=&quot;https://leetcode-cn.co</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.xuyicheng.top/tags/java/"/>
    
    <category term="数组" scheme="https://blog.xuyicheng.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>删除回文子序列</title>
    <link href="https://blog.xuyicheng.top/2022-01-22-%E5%88%A0%E9%99%A4%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.html"/>
    <id>https://blog.xuyicheng.top/2022-01-22-%E5%88%A0%E9%99%A4%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.html</id>
    <published>2022-01-22T02:51:59.000Z</published>
    <updated>2022-01-22T02:55:01.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="力扣-1332-删除回文子序列"><a href="#力扣-1332-删除回文子序列" class="headerlink" title="力扣 1332. 删除回文子序列"></a>力扣 <a href="https://leetcode-cn.com/problems/remove-palindromic-subsequences/">1332. 删除回文子序列</a></h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><p>给你一个字符串 <code>s</code>，它仅由字母 <code>&#39;a&#39;</code> 和 <code>&#39;b&#39;</code> 组成。每一次删除操作都可以从 <code>s</code> 中删除一个回文 <strong>子序列</strong>。</p><p>返回删除给定字符串中所有字符（字符串为空）的最小删除次数。</p><p>「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。</p><p>「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅包含字母 <code>&#39;a&#39;</code> 和 <code>&#39;b&#39;</code></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ababa&quot;</span><br><span class="line">输出：1</span><br><span class="line">解释：字符串本身就是回文序列，只需要删除一次。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abb&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：&quot;abb&quot; -&gt; &quot;bb&quot; -&gt; &quot;&quot;. </span><br><span class="line">先删除回文子序列 &quot;a&quot;，然后再删除 &quot;bb&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;baabb&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：&quot;baabb&quot; -&gt; &quot;b&quot; -&gt; &quot;&quot;. </span><br><span class="line">先删除回文子序列 &quot;baab&quot;，然后再删除 &quot;b&quot;。</span><br></pre></td></tr></table></figure><h3 id="笔者理解"><a href="#笔者理解" class="headerlink" title="笔者理解"></a>笔者理解</h3><p>此题是一道字符串算法问题，在力扣题库中被定义为简单题。 </p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>当笔者阅读完此题后，<strong>发现此题算是一个脑经急转弯，情况只是只有三种</strong>，让我们来看看具体如何实现的吧。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removePalindromeSub</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 回文字符串</span></span><br><span class="line">        <span class="keyword">if</span> (judge(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先删除a，再删除b</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前字符串是不是回文字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chars[i] != chars[n - <span class="number">1</span> - i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间、空间效率还行，可见此解法还比较适合此题。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220122105437158.png" alt="image-20220122105437158"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本题是今天的每日一题，难度是为简单，感兴趣的朋友都可以去尝试一下，此题还有其他更多的解法，朋友们可以自己逐一尝试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;力扣-1332-删除回文子序列&quot;&gt;&lt;a href=&quot;#力扣-1332-删除回文子序列&quot; class=&quot;headerlink&quot; title=&quot;力扣 1332. 删除回文子序列&quot;&gt;&lt;/a&gt;力扣 &lt;a href=&quot;https://leetcode-cn.com/prob</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.xuyicheng.top/tags/java/"/>
    
    <category term="字符串" scheme="https://blog.xuyicheng.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>最小时间差</title>
    <link href="https://blog.xuyicheng.top/2022-01-18-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE.html"/>
    <id>https://blog.xuyicheng.top/2022-01-18-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE.html</id>
    <published>2022-01-18T08:31:30.000Z</published>
    <updated>2022-01-18T08:33:59.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="力扣-539-最小时间差"><a href="#力扣-539-最小时间差" class="headerlink" title="力扣 539. 最小时间差"></a>力扣 <a href="https://leetcode-cn.com/problems/minimum-time-difference/">539. 最小时间差</a></h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><p>给定一个 24 小时制（小时:分钟 **”HH:MM”**）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。</p><p><strong>提示：</strong></p><ul><li><code>2 &lt;= timePoints.length &lt;= 2 * 10^4</code></li><li><code>timePoints[i]</code> 格式为 <strong>“HH:MM”</strong></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：timePoints = [&quot;23:59&quot;,&quot;00:00&quot;]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：timePoints = [&quot;00:00&quot;,&quot;23:59&quot;,&quot;00:00&quot;]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h3 id="笔者理解"><a href="#笔者理解" class="headerlink" title="笔者理解"></a>笔者理解</h3><p>此题是一道字符串算法问题，在力扣题库中被定义为中等题。 </p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>当笔者阅读完此题后，<strong>发现此题直接计算即可</strong>，让我们来看看具体如何实现的吧。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinDifference</span><span class="params">(List&lt;String&gt; timePoints)</span> </span>&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; times = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将字符串转化为小时和分钟的形式</span></span><br><span class="line">    <span class="keyword">for</span> (String s : timePoints) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] ch = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> hour = (ch[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (ch[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">int</span> minute = (ch[<span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (ch[<span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        times.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;hour, minute&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按时间排序</span></span><br><span class="line">    times.sort((o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (o1[<span class="number">0</span>] == o2[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o1[<span class="number">0</span>] - o2[<span class="number">0</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将第一个时间加上24个小时加到序列末尾方便计算最后一个时间与其差值</span></span><br><span class="line">    <span class="keyword">int</span> firstHour = times.get(<span class="number">0</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> firstMinute = times.get(<span class="number">0</span>)[<span class="number">1</span>];</span><br><span class="line">    firstHour += <span class="number">24</span>;</span><br><span class="line">    times.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;firstHour, firstMinute&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> minDiff = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; times.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> diff = count(times.get(i - <span class="number">1</span>), times.get(i));</span><br><span class="line">        <span class="keyword">if</span> (diff == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        minDiff = Math.min(minDiff, diff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minDiff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两时间之差</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> time1 time1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> time2 time2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 所差的分钟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span>[] time1, <span class="keyword">int</span>[] time2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (time1[<span class="number">0</span>] == time2[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> time2[<span class="number">1</span>] - time1[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">60</span> * (time2[<span class="number">0</span>] - time1[<span class="number">0</span>]) + time2[<span class="number">1</span>] - time1[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间、空间效率一般，可见此解法还比较适合此题。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220118163335194.png" alt="image-20220118163335194"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本题是今天的每日一题，难度是为中等，感兴趣的朋友都可以去尝试一下，此题还有其他更多的解法，朋友们可以自己逐一尝试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;力扣-539-最小时间差&quot;&gt;&lt;a href=&quot;#力扣-539-最小时间差&quot; class=&quot;headerlink&quot; title=&quot;力扣 539. 最小时间差&quot;&gt;&lt;/a&gt;力扣 &lt;a href=&quot;https://leetcode-cn.com/problems/mini</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.xuyicheng.top/tags/java/"/>
    
    <category term="字符串" scheme="https://blog.xuyicheng.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数组" scheme="https://blog.xuyicheng.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://blog.xuyicheng.top/2022-01-13-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://blog.xuyicheng.top/2022-01-13-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html</id>
    <published>2022-01-13T12:00:10.000Z</published>
    <updated>2022-01-13T12:06:37.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对建造者模式进行具体实现举例。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在下面的例子中，我们使用建造者模式来对 Person 类的实例化进行了改装，使其能够以<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%BC%8F%E6%8E%A5%E5%8F%A3">链式调用</a>的形式创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 建造者模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式。</span></span><br><span class="line"><span class="comment"> * 源自 https://zhuanlan.zhihu.com/p/58093669</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> marx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/01/13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Person person2 = Person.builder()</span><br><span class="line">                                .name(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">                                .age(<span class="number">18</span>)</span><br><span class="line">                                .gender(<span class="string">&quot;男&quot;</span>)</span><br><span class="line">                                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 必选</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 必选</span></span><br><span class="line">    <span class="keyword">private</span> String gender; <span class="comment">// 必选</span></span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">// 可选</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String gender, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建造者模式使用的开始</span></span><br><span class="line"><span class="comment">     * 此处方法置为 static 是方便直接用类名调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> PersonBuilder&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PersonBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PersonBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String gender;</span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分别用对应的属性名作为方法名来设置属性</span></span><br><span class="line">        <span class="comment">// 方法返回 this 是为了可以实现链式调用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PersonBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PersonBuilder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PersonBuilder <span class="title">gender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.gender = gender;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PersonBuilder <span class="title">address</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.address = address;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 建造者模式使用的结尾，将中途获取的属性都注入对象中</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Person&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(name, age, gender, address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;在之前的文章中我们介绍了常见的设计模式，今天我们来使用 Java 语言对建造者模式进行具体实现举例。&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.xuyicheng.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>累加数</title>
    <link href="https://blog.xuyicheng.top/2022-01-10-%E7%B4%AF%E5%8A%A0%E6%95%B0.html"/>
    <id>https://blog.xuyicheng.top/2022-01-10-%E7%B4%AF%E5%8A%A0%E6%95%B0.html</id>
    <published>2022-01-10T09:36:44.000Z</published>
    <updated>2022-01-10T09:40:38.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="力扣-306-累加数"><a href="#力扣-306-累加数" class="headerlink" title="力扣 306. 累加数"></a>力扣 <a href="https://leetcode-cn.com/problems/additive-number/">306. 累加数</a></h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><p><strong>累加数</strong> 是一个字符串，组成它的数字可以形成累加序列。</p><p>一个有效的 <strong>累加序列</strong> 必须 <strong>至少</strong> 包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。</p><p>给你一个只包含数字 ‘0’-‘9’ 的字符串，编写一个算法来判断给定输入是否是 <strong>累加数</strong> 。如果是，返回 true ；否则，返回 false 。</p><p>说明：累加序列里的数 <strong>不会</strong> 以 0 开头，所以不会出现 1, 2, 03 或者 1, 02, 3 的情况。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num.length &lt;= 35</code></li><li><code>num</code> 仅由数字（<code>0</code> - <code>9</code>）组成</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;112358&quot;</span><br><span class="line">输出：true </span><br><span class="line">解释：累加序列为: 1, 1, 2, 3, 5, 8 。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;199100199&quot;</span><br><span class="line">输出：true </span><br><span class="line">解释：累加序列为: 1, 99, 100, 199。1 + 99 = 100, 99 + 100 = 199</span><br></pre></td></tr></table></figure><h3 id="笔者理解"><a href="#笔者理解" class="headerlink" title="笔者理解"></a>笔者理解</h3><p>此题是一道字符串算法问题，在力扣题库中被定义为中等题。 </p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>当笔者阅读完此题后，<strong>发现此题考察的其实就是深度优先搜索的能力和剪枝的判断</strong>，让我们来看看具体如何实现的吧。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dfs</span></span><br><span class="line"><span class="comment">     * 大数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAdditiveNumber</span><span class="params">(String num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = num.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个数的位数</span></span><br><span class="line">        <span class="keyword">int</span> firstSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最起码有三个数</span></span><br><span class="line">        <span class="keyword">while</span> (firstSize &lt; size - <span class="number">1</span>) &#123;</span><br><span class="line">            String first = num.substring(<span class="number">0</span>, firstSize);</span><br><span class="line">            <span class="keyword">if</span> (judge(first)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用BigInteger防止数字过长</span></span><br><span class="line">            BigInteger firstNum = <span class="keyword">new</span> BigInteger(first);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历第二个数可能的位数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (size - firstSize) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                String second = num.substring(firstSize, firstSize + i);</span><br><span class="line">                <span class="keyword">if</span> (judge(second)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                BigInteger secondNum = <span class="keyword">new</span> BigInteger(second);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 深度遍历后序是否符合题意</span></span><br><span class="line">                <span class="keyword">if</span> (dfs(num.substring(firstSize + i, size), firstNum, secondNum, <span class="number">2</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第一个数的预设长度加一</span></span><br><span class="line">            firstSize++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前数是否含有前置 0 且不为 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(String num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num.length() &gt; <span class="number">1</span> &amp;&amp; num.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 深度遍历</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num       字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstNum  第一次num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secondNum 第二个num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count     已经有几个符合要求的数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span> <span class="params">(String num, BigInteger firstNum, BigInteger secondNum, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = num.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当字符串遍历结束且已经有三个以上符合要求的数</span></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span> &amp;&amp; count &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取相加数中 位数更长的作为标记</span></span><br><span class="line">        <span class="keyword">int</span> bigSize = Math.max(firstNum.toString().length(), secondNum.toString().length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剩下的字符串长度不够则匹配失败</span></span><br><span class="line">        <span class="keyword">if</span> (size &lt; bigSize) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a + b = c, c 可能的位数为 a, b 中较大的位数或加一</span></span><br><span class="line">        <span class="keyword">int</span> length = Math.min(size, bigSize + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = bigSize; i &lt;= length; i++) &#123;</span><br><span class="line">            String third = num.substring(<span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (judge(third)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            BigInteger thirdNum = <span class="keyword">new</span> BigInteger(third);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// a + b = c 时继续遍历剩下的字符串</span></span><br><span class="line">            <span class="keyword">if</span> (firstNum.add(secondNum).equals(thirdNum)) &#123;</span><br><span class="line">                <span class="keyword">return</span> dfs(num.substring(i, size), secondNum, thirdNum, count + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间、空间效率一般，可见此解法还比较适合此题。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220110173939559.png" alt="image-20220110173939559"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本题是今天的每日一题，难度是为中等，感兴趣的朋友都可以去尝试一下，此题还有其他更多的解法，朋友们可以自己逐一尝试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;力扣-306-累加数&quot;&gt;&lt;a href=&quot;#力扣-306-累加数&quot; class=&quot;headerlink&quot; title=&quot;力扣 306. 累加数&quot;&gt;&lt;/a&gt;力扣 &lt;a href=&quot;https://leetcode-cn.com/problems/additive-n</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.xuyicheng.top/tags/java/"/>
    
    <category term="字符串" scheme="https://blog.xuyicheng.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="深度优先搜索" scheme="https://blog.xuyicheng.top/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>格雷编码</title>
    <link href="https://blog.xuyicheng.top/2022-01-08-%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81.html"/>
    <id>https://blog.xuyicheng.top/2022-01-08-%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81.html</id>
    <published>2022-01-08T12:08:46.000Z</published>
    <updated>2022-01-08T12:12:19.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="力扣-89-格雷编码"><a href="#力扣-89-格雷编码" class="headerlink" title="力扣 89. 格雷编码"></a>力扣 <a href="https://leetcode-cn.com/problems/gray-code/">89. 格雷编码</a></h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><p>n 位格雷码序列 是一个由 2n 个整数组成的序列，其中：</p><ul><li>每个整数都在范围 [0, 2n - 1] 内（含 0 和 2n - 1）</li><li>第一个整数是 0</li><li>一个整数在序列中出现 不超过一次</li><li>每对 相邻 整数的二进制表示 恰好一位不同 ，且</li><li>第一个 和 最后一个 整数的二进制表示 恰好一位不同</li><li>给你一个整数 n ，返回任一有效的 n 位格雷码序列 。</li></ul><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 16</code></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：[0,1,3,2]</span><br><span class="line">解释：</span><br><span class="line">[0,1,3,2] 的二进制表示是 [00,01,11,10] 。</span><br><span class="line">- 00 和 01 有一位不同</span><br><span class="line">- 01 和 11 有一位不同</span><br><span class="line">- 11 和 10 有一位不同</span><br><span class="line">- 10 和 00 有一位不同</span><br><span class="line">[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。</span><br><span class="line">- 00 和 10 有一位不同</span><br><span class="line">- 10 和 11 有一位不同</span><br><span class="line">- 11 和 01 有一位不同</span><br><span class="line">- 01 和 00 有一位不同</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><h3 id="笔者理解"><a href="#笔者理解" class="headerlink" title="笔者理解"></a>笔者理解</h3><p>此题是一道数组算法问题，在力扣题库中被定义为中等题。 </p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>当笔者阅读完此题后，<strong>发现此题涉及到位操作，还有着对首尾元素的约束，所以这里我们采用对称操作的求解方式</strong>，让我们来看看具体如何实现的吧。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对称解法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">grayCode</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        result.add(<span class="number">0</span>);result.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为题目要求下一位与前一位的变化为二进制一位且要求首尾也要符合</span></span><br><span class="line">        <span class="comment">// 所以我们就在 n-1 求解出来的基础上进行求解</span></span><br><span class="line">        <span class="comment">// 每个 n 解其实结果数量时 n-1 的两倍</span></span><br><span class="line">        <span class="comment">// 所以我们可以利用这一点，将 n-1 的解对称翻转</span></span><br><span class="line">        <span class="comment">// 例如：[0, 1, 1, 0]，此时 n=2</span></span><br><span class="line">        <span class="comment">// 再将后面翻转所得的数首部都加一个 1（二进制）</span></span><br><span class="line">        <span class="comment">// 得：[00, 01, 11, 10]，可以看到完美符合题意</span></span><br><span class="line">        <span class="comment">// 以此类推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = <span class="number">2</span> &lt;&lt; (i - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = size - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                result.add(result.get(j) + size);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间、空间效率还行，可见此解法还比较适合此题。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220108201105878.png" alt="image-20220108201105878"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本题是今天的每日一题，难度是为中等，感兴趣的朋友都可以去尝试一下，此题还有其他更多的解法，朋友们可以自己逐一尝试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;力扣-89-格雷编码&quot;&gt;&lt;a href=&quot;#力扣-89-格雷编码&quot; class=&quot;headerlink&quot; title=&quot;力扣 89. 格雷编码&quot;&gt;&lt;/a&gt;力扣 &lt;a href=&quot;https://leetcode-cn.com/problems/gray-code/</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.xuyicheng.top/tags/java/"/>
    
    <category term="数组" scheme="https://blog.xuyicheng.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>简化路径</title>
    <link href="https://blog.xuyicheng.top/2022-01-06-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84.html"/>
    <id>https://blog.xuyicheng.top/2022-01-06-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84.html</id>
    <published>2022-01-06T09:42:58.000Z</published>
    <updated>2022-01-06T09:50:15.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="力扣-71-简化路径"><a href="#力扣-71-简化路径" class="headerlink" title="力扣 71. 简化路径"></a>力扣 <a href="https://leetcode-cn.com/problems/simplify-path/">71. 简化路径</a></h2><h3 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h3><p>给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘/‘ 开头），请你将其转化为更加简洁的规范路径。</p><p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’//‘）都被视为单个斜杠 ‘/‘ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件/目录名称。</p><p>请注意，返回的 规范路径 必须遵循下述格式：</p><ul><li>始终以斜杠 ‘/‘ 开头。</li><li>两个目录名之间必须只有一个斜杠 ‘/‘ 。</li><li>最后一个目录名（如果存在）不能 以 ‘/‘ 结尾。</li><li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。</li><li>返回简化后得到的 规范路径 。</li></ul><p><strong>提示：</strong></p><ul><li>1 &lt;= path.length &lt;= 3000</li><li>path 由英文字母，数字，’.’，’/‘ 或 ‘_’ 组成。</li><li>path 是一个有效的 Unix 风格绝对路径。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/home/&quot;</span><br><span class="line">输出：&quot;/home&quot;</span><br><span class="line">解释：注意，最后一个目录名后面没有斜杠。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/../&quot;</span><br><span class="line">输出：&quot;/&quot;</span><br><span class="line">解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/home//foo/&quot;</span><br><span class="line">输出：&quot;/home/foo&quot;</span><br><span class="line">解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/a/./b/../../c/&quot;</span><br><span class="line">输出：&quot;/c&quot;</span><br></pre></td></tr></table></figure><h3 id="笔者理解"><a href="#笔者理解" class="headerlink" title="笔者理解"></a>笔者理解</h3><p>此题是一道字符串算法问题，在力扣题库中被定义为中等题。 </p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>当笔者阅读完此题后，<strong>发现此题只需要注意 <code>/</code> 和 <code>.</code> 即可，多个 <code>/</code> 等于一个 <code>/</code> ，所有我们可以将 <code>/</code> 去除将所有字符拆分开来后面再加 <code>/</code>，一个<code>.</code> 代表当前路径，无需改变栈，两个 <code>.</code> 要删除前一个路径，三个及以上 <code>.</code> 实际也视为一个文件名</strong>，让我们来看看具体如何实现的吧。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串</span></span><br><span class="line"><span class="comment">     * 栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simplifyPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = path.toCharArray();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        StringBuilder temp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先将所有非 / 字符拆分出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chars[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(temp.toString())) &#123;</span><br><span class="line">                    strList.add(temp.toString());</span><br><span class="line">                    temp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                temp.append(chars[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(temp.toString())) &#123;</span><br><span class="line">            strList.add(temp.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再通过栈后进先出的方式来应对路径变化</span></span><br><span class="line">        Deque&lt;String&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str: strList) &#123;</span><br><span class="line">            <span class="comment">// 当前路径</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;.&quot;</span>.equals(str)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 上一级目录</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;..&quot;</span>.equals(str)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                    stack.removeLast();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.addLast(<span class="string">&quot;/&quot;</span> + str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        stack.forEach(temp::append);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止有空路径出现</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.equals(temp.toString())? <span class="string">&quot;/&quot;</span>: temp.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间效率还行，空间效率一般，可见此解法还比较适合此题。</p><p><img src="https://pool-1305119010.cos.ap-nanjing.myqcloud.com/images/blog_imagesimage-20220106174624828.png" alt="image-20220106174624828"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本题是今天的每日一题，难度是为中等，感兴趣的朋友都可以去尝试一下，此题还有其他更多的解法，朋友们可以自己逐一尝试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;力扣-71-简化路径&quot;&gt;&lt;a href=&quot;#力扣-71-简化路径&quot; class=&quot;headerlink&quot; title=&quot;力扣 71. 简化路径&quot;&gt;&lt;/a&gt;力扣 &lt;a href=&quot;https://leetcode-cn.com/problems/simplify-p</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.xuyicheng.top/tags/java/"/>
    
    <category term="字符串" scheme="https://blog.xuyicheng.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="栈" scheme="https://blog.xuyicheng.top/tags/%E6%A0%88/"/>
    
  </entry>
  
</feed>
